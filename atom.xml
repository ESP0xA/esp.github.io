<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dirac Sea</title>
  
  <subtitle>where the water tastes like wine</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://accepted.org.cn/"/>
  <updated>2021-08-16T14:50:11.724Z</updated>
  <id>https://accepted.org.cn/</id>
  
  <author>
    <name>etoa</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HJ9. 提取不重复的整数</title>
    <link href="https://accepted.org.cn/2021/08/16/HJ9-%E6%8F%90%E5%8F%96%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B4%E6%95%B0/"/>
    <id>https://accepted.org.cn/2021/08/16/HJ9-%E6%8F%90%E5%8F%96%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B4%E6%95%B0/</id>
    <published>2021-08-16T14:40:16.000Z</published>
    <updated>2021-08-16T14:50:11.724Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>TwoSum既视感[滑稽]</p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>描述</strong><br>输入一个 <code>int</code> 型整数，按照从右向左的阅读顺序，返回一个不含重复数字的新的整数。<br>保证输入的整数最后一位不是 $0$。</p><p><strong>输入描述：</strong><br>输入一个 <code>int</code> 型整数</p><p><strong>输出描述：</strong><br>按照从右向左的阅读顺序，返回一个不含重复数字的新的整数</p><p><strong>示例1</strong></p><blockquote><p>输入：<br>9876673</p></blockquote><blockquote><p>输出：<br>37689</p></blockquote><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">C++</a></li><li class="tab"><a href="#g_tab0-2">Java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * author: etoa</span></span><br><span class="line"><span class="comment"> * 2021年08月16日22:43:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">bool</span>&gt; st;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (; n; n /= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = n % <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (!st[x]) <span class="built_in">cout</span> &lt;&lt; x;</span><br><span class="line">        st[x] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="g_tab0-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * author: etoa</span></span><br><span class="line"><span class="comment"> * 2021-08-16 22:48:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        n = in.nextInt();</span><br><span class="line">        Map&lt;Integer, Boolean&gt; st = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (; n != <span class="number">0</span>; n /= <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = n % <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (!st.containsKey(x)) &#123;</span><br><span class="line">                System.out.print(x);</span><br><span class="line">            &#125;</span><br><span class="line">            st.put(x, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><div class="note primary">            <p><strong>原题链接：</strong> <a href="https://www.nowcoder.com/practice/253986e66d114d378ae8de2e6c4577c1?tpId=37&&tqId=21232&rp=1&ru=/ta/huawei&qru=/ta/huawei/question-ranking" target="_blank" rel="noopener">HJ9. 提取不重复的整数</a></p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;TwoSum既视感[滑稽]&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="算法" scheme="https://accepted.org.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="哈希表" scheme="https://accepted.org.cn/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
      <category term="NowCoder" scheme="https://accepted.org.cn/tags/NowCoder/"/>
    
      <category term="华为机试题库" scheme="https://accepted.org.cn/tags/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95%E9%A2%98%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>HJ8. 合并表记录</title>
    <link href="https://accepted.org.cn/2021/08/16/HJ8-%E5%90%88%E5%B9%B6%E8%A1%A8%E8%AE%B0%E5%BD%95/"/>
    <id>https://accepted.org.cn/2021/08/16/HJ8-%E5%90%88%E5%B9%B6%E8%A1%A8%E8%AE%B0%E5%BD%95/</id>
    <published>2021-08-16T14:01:34.000Z</published>
    <updated>2021-08-16T14:31:25.189Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>有序哈希表的应用。</p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>描述</strong><br>数据表记录包含表索引和数值（ <code>int</code> 范围的正整数），请对表索引相同的记录进行合并，即将相同索引的数值进行求和运算，输出按照 <code>key</code> 值升序进行输出。</p><p><strong>输入描述：</strong><br>先输入键值对的个数<br>然后输入成对的 <code>index</code> 和 <code>value</code> 值，以空格隔开</p><p><strong>输出描述：</strong><br>输出合并后的键值对（多行）</p><p><strong>示例1</strong></p><blockquote><p>输入：<br>4<br>0 1<br>0 2<br>1 2<br>3 4</p></blockquote><blockquote><p>输出：<br>0 3<br>1 2<br>3 4</p></blockquote><h3 id="有序哈希表"><a href="#有序哈希表" class="headerlink" title="有序哈希表"></a>有序哈希表</h3><p>将数据放到哈希表中，再将 <code>key</code> 相同的 <code>value</code> 累加即可。同时，题目要求按照 <code>key</code> 升序排列。所以可以考虑使用有序哈希表。<br>在C++中是STL的 <code>Map</code>，在Java中则是 <code>TreeMap</code>。</p><p>注意在Java中 <code>Map.Entry&lt;K, V&gt;</code> 是Map的静态接口。遍历的时候用到。</p><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">C++</a></li><li class="tab"><a href="#g_tab0-2">Java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * author: etoa</span></span><br><span class="line"><span class="comment"> * 2021-08-16 22:06:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; hash;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (; n--;) &#123;</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        hash[x] += y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> [key, value] : hash) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; key &lt;&lt; <span class="string">' '</span> &lt;&lt; value &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="g_tab0-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * author: etoa</span></span><br><span class="line"><span class="comment"> * 2021-08-16 22:30:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        Map&lt;Integer, Integer&gt; hash = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> n = in.nextInt();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = in.nextInt();</span><br><span class="line">            <span class="keyword">int</span> y = in.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (hash.containsKey(x)) &#123;</span><br><span class="line">                hash.put(x, hash.get(x) + y);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                hash.put(x, y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : hash.entrySet()) &#123;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">" "</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><div class="note primary">            <p><strong>原题链接：</strong> <a href="https://www.nowcoder.com/practice/de044e89123f4a7482bd2b214a685201?tpId=37&&tqId=21231&rp=1&ru=/ta/huawei&qru=/ta/huawei/question-ranking" target="_blank" rel="noopener">HJ8. 合并表记录</a></p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;有序哈希表的应用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="指尖飞舞" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/"/>
    
      <category term="算法" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/"/>
    
      <category term="NowCoder" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/NowCoder/"/>
    
      <category term="华为机试题库" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/NowCoder/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95%E9%A2%98%E5%BA%93/"/>
    
    
      <category term="算法" scheme="https://accepted.org.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="哈希表" scheme="https://accepted.org.cn/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
      <category term="NowCoder" scheme="https://accepted.org.cn/tags/NowCoder/"/>
    
      <category term="华为机试题库" scheme="https://accepted.org.cn/tags/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95%E9%A2%98%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>HJ7. 取近似值</title>
    <link href="https://accepted.org.cn/2021/08/15/HJ7-%E5%8F%96%E8%BF%91%E4%BC%BC%E5%80%BC/"/>
    <id>https://accepted.org.cn/2021/08/15/HJ7-%E5%8F%96%E8%BF%91%E4%BC%BC%E5%80%BC/</id>
    <published>2021-08-15T09:03:52.000Z</published>
    <updated>2021-08-15T10:28:19.597Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>注意C++和Java强转整型的区别。</p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>描述</strong><br>写出一个程序，接受一个正浮点数值，输出该数值的近似整数值。如果小数点后数值大于等于5,向上取整；小于5，则向下取整。</p><p><strong>输入描述：</strong><br>输入一个正浮点数值</p><p><strong>输出描述：</strong><br>输出该数值的近似整数值</p><p><strong>示例1</strong></p><blockquote><p>输入：<br>5.5</p></blockquote><blockquote><p>输出：<br>6</p></blockquote><h3 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h3><p>本题主要关注一下C++和Java在float转整型时的区别、<br><code>float x = 5.0;</code><br>在C++中，<code>int y = x * 10;</code> 即可，或者 <code>int y = (int)x * 10;</code>，在一个变量上强转一次，整个表达式都默认强转。<br>而在Java中，<code>int y = x * 10;</code>是错的，应该 <code>int y = (int)(x * 10);</code> 整个表达式放在一起强转。</p><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">C++</a></li><li class="tab"><a href="#g_tab0-2">Java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * author: etoa</span></span><br><span class="line"><span class="comment"> * 2021-08-15 17:06:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> x;</span><br><span class="line">    <span class="keyword">for</span> (; <span class="built_in">cin</span> &gt;&gt; x;) &#123;</span><br><span class="line">        <span class="keyword">int</span> y = x * <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> base = y / <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> remain = y % <span class="number">10</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (remain &lt; <span class="number">5</span> ? base : base + <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="g_tab0-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * author: etoa</span></span><br><span class="line"><span class="comment"> * 2021-08-15 17:05:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">for</span> (; in.hasNext();) &#123;</span><br><span class="line">            <span class="keyword">float</span> x = in.nextFloat();</span><br><span class="line">            <span class="keyword">int</span> y = (<span class="keyword">int</span>)(x * <span class="number">10</span>);</span><br><span class="line">            <span class="keyword">int</span> base = y / <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">int</span> remain = y % <span class="number">10</span>;</span><br><span class="line">            System.out.println(remain &lt; <span class="number">5</span> ? base : base + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><div class="note primary">            <p><strong>原题链接：</strong> <a href="https://www.nowcoder.com/practice/3ab09737afb645cc82c35d56a5ce802a?tpId=37&&tqId=21230&rp=1&ru=/ta/huawei&qru=/ta/huawei/question-ranking" target="_blank" rel="noopener">HJ7. 取近似值</a></p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;注意C++和Java强转整型的区别。&lt;/p&gt;
    
    </summary>
    
    
      <category term="指尖飞舞" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/"/>
    
      <category term="算法" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/"/>
    
      <category term="NowCoder" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/NowCoder/"/>
    
      <category term="华为机试题库" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/NowCoder/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95%E9%A2%98%E5%BA%93/"/>
    
    
      <category term="算法" scheme="https://accepted.org.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="NowCoder" scheme="https://accepted.org.cn/tags/NowCoder/"/>
    
      <category term="华为机试题库" scheme="https://accepted.org.cn/tags/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95%E9%A2%98%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>HJ6. 质数因子</title>
    <link href="https://accepted.org.cn/2021/08/15/HJ6-%E8%B4%A8%E6%95%B0%E5%9B%A0%E5%AD%90/"/>
    <id>https://accepted.org.cn/2021/08/15/HJ6-%E8%B4%A8%E6%95%B0%E5%9B%A0%E5%AD%90/</id>
    <published>2021-08-15T06:48:53.000Z</published>
    <updated>2021-08-15T08:44:24.753Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>对一个正整数分解质因数。</p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>描述</strong><br>功能:输入一个正整数，按照从小到大的顺序输出它的所有质因子（重复的也要列举）（如 $180$ 的质因子为 $2$ $2$ $3$ $3$ $5$ ）</p><p>最后一个数后面也要有空格</p><p><strong>输入描述：</strong><br>输入一个long型整数</p><p><strong>输出描述：</strong><br>按照从小到大的顺序输出它的所有质数的因子，以空格隔开。最后一个数后面也要有空格。</p><p><strong>示例1</strong></p><blockquote><p>输入：<br>180</p></blockquote><blockquote><p>输出：<br>2 2 3 3 5</p></blockquote><h3 id="最小质因子和最大质因子-埃式筛优化"><a href="#最小质因子和最大质因子-埃式筛优化" class="headerlink" title="最小质因子和最大质因子+埃式筛优化"></a>最小质因子和最大质因子+埃式筛优化</h3><p>一个显然的思路是，对于一个数，找到它的最小质因子，然后将这个数更新成对该最小质因子整除后的数，依次再去找到其最小质因子。<br>可以从2开始试，如果一个数会被2整除，这个数除2之后也可以被2整除，直到结束。那么这个数的质因子就全是2.<br>如果在中间某处不能被2整除了，说明这个数往后更新的时候均不可被2整除。这时候尝试可否整除3.<br>按照这个方法直到找到所有最小质因子。</p><p>现在考虑如何优化。</p><p>优化一：<br>首先看下最大质因子性质：<br><strong>一个正整数的质因子，最多只有一个大于其平方根。</strong><br>证明：假设有超过一个质因子大于其平方根，那么二者相乘一定大于该数。得证。</p><p>对于目标数字 $x$，根据这个性质，我们可以将可能出现的质因子限制在 $\sqrt x$及以内。再考虑剩余可能的最后一个大于 $\sqrt x$的质因子。</p><p>优化二：<br>因为求的是所有质因子，那么在找到每个质因子之后，我们都可以借助 <a href="/2020/12/03/【AcWing算法基础】第四讲-数学知识-质数-AcWing-868-筛质数/">筛质数</a> 思想，将一部分非质数筛掉，在剩下的中找目标质因子。</p><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">C++</a></li><li class="tab"><a href="#g_tab0-2">Java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * author: etoa</span></span><br><span class="line"><span class="comment"> * 2021-08-15 16:01:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">long</span>, <span class="keyword">bool</span>&gt; st;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">long</span> &amp;n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> i = <span class="number">2L</span>;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt;= (<span class="keyword">long</span>)<span class="built_in">sqrt</span>(n); i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (; !st[i] &amp;&amp; n % i == <span class="number">0</span>;) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">            n /= i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 更新一次即可</span></span><br><span class="line">        <span class="keyword">bool</span> is_set = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (!is_set) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">long</span> j = i + i; j &lt;= (<span class="keyword">long</span>)<span class="built_in">sqrt</span>(n); j += i)</span><br><span class="line">                st[j] = <span class="literal">true</span>;</span><br><span class="line">            is_set = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 此时存在最大质因子超过原数字平方根的可能</span></span><br><span class="line">    <span class="keyword">if</span> (n != <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="string">' '</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>)-&gt;sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">long</span> n;</span><br><span class="line">    <span class="keyword">for</span> (; <span class="built_in">cin</span> &gt;&gt; n;)</span><br><span class="line">        solve(n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="g_tab0-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * author: etoa</span></span><br><span class="line"><span class="comment"> * 2021-08-15 16:44:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">for</span> (; in.hasNext();) &#123;</span><br><span class="line">            <span class="keyword">long</span> x = in.nextLong();</span><br><span class="line">            Map&lt;Long, Boolean&gt; hash = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">2</span>; i &lt;= (<span class="keyword">long</span>)Math.sqrt(x); i++) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> isSet = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">for</span> (;(hash.get(i) == <span class="keyword">null</span> || hash.get(i) == <span class="keyword">false</span>) &amp;&amp; x % i == <span class="number">0</span>;) &#123;</span><br><span class="line">                    System.out.print(i + <span class="string">" "</span>);</span><br><span class="line">                    x /= i;</span><br><span class="line">                    <span class="keyword">if</span> (!isSet) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">long</span> j = i + i; j &lt;= (<span class="keyword">long</span>)Math.sqrt(x); j += i) &#123;</span><br><span class="line">                            hash.put(j, <span class="keyword">true</span>);</span><br><span class="line">                        &#125;    </span><br><span class="line">                        isSet = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (x != <span class="number">1</span>) System.out.print(x + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><div class="note primary">            <p><strong>原题链接：</strong> <a href="https://www.nowcoder.com/practice/196534628ca6490ebce2e336b47b3607?tpId=37&&tqId=21229&rp=1&ru=/ta/huawei&qru=/ta/huawei/question-ranking" target="_blank" rel="noopener">HJ6. 质数因子</a></p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;对一个正整数分解质因数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="指尖飞舞" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/"/>
    
      <category term="算法" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/"/>
    
      <category term="NowCoder" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/NowCoder/"/>
    
      <category term="华为机试题库" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/NowCoder/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95%E9%A2%98%E5%BA%93/"/>
    
    
      <category term="算法" scheme="https://accepted.org.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数论" scheme="https://accepted.org.cn/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="质数" scheme="https://accepted.org.cn/tags/%E8%B4%A8%E6%95%B0/"/>
    
      <category term="NowCoder" scheme="https://accepted.org.cn/tags/NowCoder/"/>
    
      <category term="华为机试题库" scheme="https://accepted.org.cn/tags/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95%E9%A2%98%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>HJ5. 进制转换</title>
    <link href="https://accepted.org.cn/2021/08/15/HJ5-%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
    <id>https://accepted.org.cn/2021/08/15/HJ5-%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</id>
    <published>2021-08-14T17:56:57.000Z</published>
    <updated>2021-08-14T18:23:20.365Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>一个简单的十六进制转十进制问题。</p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>描述</strong><br>写出一个程序，接受一个十六进制的数，输出该数值的十进制表示。</p><p><strong>输入描述：</strong><br>输入一个十六进制的数值字符串。注意：一个用例会同时有多组输入数据，请参考帖子<a href="https://www.nowcoder.com/discuss/276处理多组输入的问题。" target="_blank" rel="noopener">https://www.nowcoder.com/discuss/276处理多组输入的问题。</a></p><p><strong>输出描述：</strong><br>输出该数值的十进制字符串。不同组的测试用例用\n隔开。</p><p><strong>示例1</strong></p><blockquote><p>输入：<br>0xA<br>0xAA</p></blockquote><blockquote><p>输出：<br>10<br>170</p></blockquote><h3 id="十六进制转十进制"><a href="#十六进制转十进制" class="headerlink" title="十六进制转十进制"></a>十六进制转十进制</h3><p>任意进制(设 $M$ 进制)转十进制：<br>先将 $M$ 种符号和对应的十进制一一对应起来。<br>答案初始化为零。<br>对于每一位 $M$ 进制符号，答案乘以 $M$ 再加上该位符号对应的十进制数。答案更新为上述值。</p><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">C++</a></li><li class="tab"><a href="#g_tab0-2">Java</a></li><li class="tab"><a href="#g_tab0-3">Java JDK</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * author:etoa</span></span><br><span class="line"><span class="comment"> * 2021-08-15 02:00:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; hashmap = &#123;&#123;<span class="string">'A'</span>, <span class="number">10</span>&#125;, &#123;<span class="string">'B'</span>, <span class="number">11</span>&#125;,</span><br><span class="line">                                 &#123;<span class="string">'C'</span>, <span class="number">12</span>&#125;, &#123;<span class="string">'D'</span>, <span class="number">13</span>&#125;,</span><br><span class="line">                                 &#123;<span class="string">'E'</span>, <span class="number">14</span>&#125;, &#123;<span class="string">'F'</span>, <span class="number">15</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">for</span> (; getline(<span class="built_in">cin</span>, s); ) &#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, n = s.<span class="built_in">size</span>(); i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = s[i];</span><br><span class="line">            <span class="keyword">int</span> x = <span class="built_in">isdigit</span>(c) ? c - <span class="string">'0'</span> : hashmap[c];</span><br><span class="line">            res = res * <span class="number">16</span> + x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="g_tab0-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * author: etoa</span></span><br><span class="line"><span class="comment"> * 2021-08-15 02:18:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;Character, Integer&gt; hash = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        hash.put(<span class="string">'A'</span>, <span class="number">10</span>);</span><br><span class="line">        hash.put(<span class="string">'B'</span>, <span class="number">11</span>);</span><br><span class="line">        hash.put(<span class="string">'C'</span>, <span class="number">12</span>);</span><br><span class="line">        hash.put(<span class="string">'D'</span>, <span class="number">13</span>);</span><br><span class="line">        hash.put(<span class="string">'E'</span>, <span class="number">14</span>);</span><br><span class="line">        hash.put(<span class="string">'F'</span>, <span class="number">15</span>);</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">for</span> (; in.hasNext();) &#123;</span><br><span class="line">            String s = in.next();</span><br><span class="line">            <span class="keyword">char</span>[] chs = s.toCharArray();</span><br><span class="line">            <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, n = s.length(); i &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">char</span> c = chs[i];</span><br><span class="line">                <span class="keyword">int</span> x = Character.isDigit(c) ? c - <span class="string">'0'</span> : hash.get(c);</span><br><span class="line">                res = res * <span class="number">16</span> + x;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="g_tab0-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * author:atoa</span></span><br><span class="line"><span class="comment"> * 2021-08-15 02:23:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">for</span> (; in.hasNext(); ) &#123;</span><br><span class="line">            String s = in.next();</span><br><span class="line">            System.out.println(Integer.valueOf(s.substring(<span class="number">2</span>), <span class="number">16</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><div class="note primary">            <p><strong>原题链接：</strong> <a href="https://www.nowcoder.com/practice/8f3df50d2b9043208c5eed283d1d4da6?tpId=37&&tqId=21228&rp=1&ru=/ta/huawei&qru=/ta/huawei/question-ranking" target="_blank" rel="noopener">HJ5. 进制转换</a></p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;一个简单的十六进制转十进制问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="指尖飞舞" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/"/>
    
      <category term="算法" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/"/>
    
      <category term="NowCoder" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/NowCoder/"/>
    
      <category term="华为机试题库" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/NowCoder/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95%E9%A2%98%E5%BA%93/"/>
    
    
      <category term="算法" scheme="https://accepted.org.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="字符串" scheme="https://accepted.org.cn/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="进制转换" scheme="https://accepted.org.cn/tags/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
    
      <category term="NowCoder" scheme="https://accepted.org.cn/tags/NowCoder/"/>
    
      <category term="华为机试题库" scheme="https://accepted.org.cn/tags/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95%E9%A2%98%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>HJ4. 字符串分隔</title>
    <link href="https://accepted.org.cn/2021/08/14/HJ4-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%86%E9%9A%94/"/>
    <id>https://accepted.org.cn/2021/08/14/HJ4-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%86%E9%9A%94/</id>
    <published>2021-08-14T13:16:26.000Z</published>
    <updated>2021-08-14T13:49:27.809Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>简单字符串分割题目。</p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>描述</strong></p><ul><li>连续输入字符串，请按长度为 $8$ 拆分每个字符串后输出到新的字符串数组；</li><li>长度不是 $8$ 整数倍的字符串请在后面补数字 $0$，空字符串不处理。</li></ul><p><strong>输入描述：</strong><br>连续输入字符串(输入多次,每个字符串长度小于 $100$)</p><p><strong>输出描述：</strong><br>输出到长度为 $8$ 的新字符串数组</p><p><strong>示例1</strong></p><blockquote><p>输入：<br>abc<br>123456789</p></blockquote><blockquote><p>输出：<br>abc00000<br>12345678<br>90000000</p></blockquote><h3 id="模拟"><a href="#模拟" class="headerlink" title="模拟"></a>模拟</h3><p>主要考察截取子串的方法，在C++的STL和Java的JDK中，字符串截取子串均有相应实现。<br>详情请见：<a href="https://eetoa.github.io/2021/06/11/算法竞赛常用STL和其他c-知识点总结/" target="_blank" rel="noopener">算法竞赛常用STL和其他c++知识点总结</a></p><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">C++</a></li><li class="tab"><a href="#g_tab0-2">Java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * author: etoa</span></span><br><span class="line"><span class="comment"> * 2021-08-14 21:19:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>)-&gt;sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">for</span> (; getline(<span class="built_in">cin</span>, s);) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, n = s.<span class="built_in">size</span>(); i &lt; n; i = i + <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="built_in">string</span> each = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">8</span> &lt; n) &#123;</span><br><span class="line">                each = s.substr(i, <span class="number">8</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                each = s.substr(i);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">8</span> - each.<span class="built_in">size</span>(); k--; each += <span class="string">'0'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; each &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="g_tab0-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * author: etoa</span></span><br><span class="line"><span class="comment"> * 2021-08-14 21:39:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">for</span> (; in.hasNext(); ) &#123;</span><br><span class="line">            String s = in.nextLine();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, n = s.length(); i &lt; n; i += <span class="number">8</span>) &#123;</span><br><span class="line">                <span class="comment">// StringBuilder sb = new StringBuilder();</span></span><br><span class="line">                String t;</span><br><span class="line">                <span class="keyword">if</span> (i + <span class="number">8</span> &lt; n) &#123;</span><br><span class="line">                    t = s.substring(i, i + <span class="number">8</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    t = s.substring(i, n);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, len = t.length(); j &lt; <span class="number">8</span> - len; j++) &#123;</span><br><span class="line">                        t += <span class="string">'0'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><div class="note primary">            <p><strong>原题链接：</strong> <a href="https://www.nowcoder.com/practice/d9162298cb5a437aad722fccccaae8a7?tpId=37&&tqId=21227&rp=1&ru=/ta/huawei&qru=/ta/huawei/question-ranking" target="_blank" rel="noopener">HJ4. 字符串分隔</a></p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;简单字符串分割题目。&lt;/p&gt;
    
    </summary>
    
    
      <category term="指尖飞舞" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/"/>
    
      <category term="算法" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/"/>
    
      <category term="NowCoder" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/NowCoder/"/>
    
      <category term="华为机试题库" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/NowCoder/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95%E9%A2%98%E5%BA%93/"/>
    
    
      <category term="算法" scheme="https://accepted.org.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="字符串" scheme="https://accepted.org.cn/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="NowCoder" scheme="https://accepted.org.cn/tags/NowCoder/"/>
    
      <category term="华为机试题库" scheme="https://accepted.org.cn/tags/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95%E9%A2%98%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>HJ3. 明明的随机数</title>
    <link href="https://accepted.org.cn/2021/08/14/HJ3-%E6%98%8E%E6%98%8E%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <id>https://accepted.org.cn/2021/08/14/HJ3-%E6%98%8E%E6%98%8E%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0/</id>
    <published>2021-08-14T11:51:56.000Z</published>
    <updated>2021-08-14T13:52:42.949Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>简单的排序+去重。</p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>描述</strong><br>明明想在学校中请一些同学一起做一项问卷调查，为了实验的客观性，他先用计算机生成了 $N$ 个 $1$ 到 $1000$ 之间的随机整数（$N≤1000$），对于其中重复的数字，只保留一个，把其余相同的数去掉，不同的数对应着不同的学生的学号。然后再把这些数从小到大排序，按照排好的顺序去找同学做调查。请你协助明明完成“去重”与“排序”的工作(同一个测试用例里可能会有多组数据(用于不同的调查)，希望大家能正确处理)。</p><p>注：测试用例保证输入参数的正确性，答题者无需验证。测试用例不止一组。</p><p>当没有新的输入时，说明输入结束。</p><p><strong>输入描述：</strong><br>注意：输入可能有多组数据(用于不同的调查)。每组数据都包括多行，第一行先输入随机整数的个数N，接下来的N行再输入相应个数的整数。具体格式请看下面的”示例”。</p><p><strong>输出描述：</strong><br>返回多行，处理后的结果</p><p><strong>示例1</strong></p><blockquote><p><strong>输入：</strong><br>3<br>2<br>2<br>1<br>11<br>10<br>20<br>40<br>32<br>67<br>40<br>20<br>89<br>300<br>400<br>15<br><strong>输出：</strong><br>1<br>2<br>10<br>15<br>20<br>32<br>40<br>67<br>89<br>300<br>400<br><strong>说明：</strong><br>输入解释：<br>第一个数字是 $3$，也即这个小样例的 $N=3$，说明用计算机生成了 $3$ 个 $1$ 到 $1000$ 之间的随机整数，接下来每行一个随机数字，共 $3$ 行，也即这 $3$ 个随机数字为：</p><p>2<br>1<br>1<br>所以第一个小样例的输出为：<br>1<br>2<br>第二个小样例的第一个数字为 $11$，也即…(类似上面的解释)…<br>所以第二个小样例的输出为：<br>10<br>15<br>20<br>32<br>40<br>67<br>89<br>300<br>400<br>所以示例1包含了两个小样例！！  </p></blockquote><h3 id="排序去重"><a href="#排序去重" class="headerlink" title="排序去重"></a>排序去重</h3><p>本题考察排序去重，C++可以完全依赖STL，C++和Java都可以使用有序集合。<br>手动去重也是可以的。</p><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">C++ 纯STL</a></li><li class="tab"><a href="#g_tab0-2">Java Arrays类排序+手动去重</a></li><li class="tab"><a href="#g_tab0-3">Java 有序集合</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * author: etoa</span></span><br><span class="line"><span class="comment"> * 2021-08-14 19:57:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">for</span> (; <span class="built_in">cin</span> &gt;&gt; n; ) &#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        sort(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">        a.erase(unique(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()), a.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;each : a) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; each &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="g_tab0-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * author: etoa</span></span><br><span class="line"><span class="comment"> * 2021-08-14 20:22:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">for</span> (; in.hasNext();)  &#123;</span><br><span class="line">            <span class="keyword">int</span> n = in.nextInt();</span><br><span class="line">            <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                a[i] = in.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">            Arrays.sort(a);</span><br><span class="line">            List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="comment">// dedupe</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                list.add(a[i]);</span><br><span class="line">                <span class="keyword">int</span> j = i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (; j &lt; n &amp;&amp; a[j] == a[i]; ++j);</span><br><span class="line">                i = j - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (Integer each : list) &#123;</span><br><span class="line">                System.out.println(each);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="g_tab0-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * author: etoa</span></span><br><span class="line"><span class="comment"> * 2021-08-14 20:45:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">for</span> (; in.hasNext();)  &#123;</span><br><span class="line">            <span class="keyword">int</span> n = in.nextInt();</span><br><span class="line">            Set&lt;Integer&gt; ordSet = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                ordSet.add(in.nextInt());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (Iterator iter = ordSet.iterator(); iter.hasNext();) &#123;</span><br><span class="line">                System.out.println(iter.next());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><div class="note primary">            <p><strong>原题链接：</strong> <a href="https://www.nowcoder.com/practice/3245215fffb84b7b81285493eae92ff0?tpId=37&&tqId=21226&rp=1&ru=/ta/huawei&qru=/ta/huawei/question-ranking" target="_blank" rel="noopener">HJ3. 明明的随机数</a></p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;简单的排序+去重。&lt;/p&gt;
    
    </summary>
    
    
      <category term="指尖飞舞" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/"/>
    
      <category term="算法" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/"/>
    
      <category term="NowCoder" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/NowCoder/"/>
    
      <category term="华为机试题库" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/NowCoder/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95%E9%A2%98%E5%BA%93/"/>
    
    
      <category term="算法" scheme="https://accepted.org.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="https://accepted.org.cn/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="NowCoder" scheme="https://accepted.org.cn/tags/NowCoder/"/>
    
      <category term="华为机试题库" scheme="https://accepted.org.cn/tags/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95%E9%A2%98%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>HJ2. 计算某字母出现次数</title>
    <link href="https://accepted.org.cn/2021/08/14/HJ2-%E8%AE%A1%E7%AE%97%E6%9F%90%E5%AD%97%E6%AF%8D%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0/"/>
    <id>https://accepted.org.cn/2021/08/14/HJ2-%E8%AE%A1%E7%AE%97%E6%9F%90%E5%AD%97%E6%AF%8D%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0/</id>
    <published>2021-08-14T04:47:56.000Z</published>
    <updated>2021-08-14T13:53:37.973Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>入门题，字符计数。</p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>描述</strong><br>写出一个程序，接受一个由字母、数字和空格组成的字符串，和一个字母，然后输出输入字符串中该字母的出现次数。不区分大小写，字符串长度小于500。</p><p><strong>输入描述：</strong><br>第一行输入一个由字母和数字以及空格组成的字符串，第二行输入一个字母。</p><p><strong>输出描述：</strong><br>输出输入字符串中含有该字符的个数。</p><p><strong>示例1</strong></p><blockquote><p>输入：<br>ABCabc<br>A<br>输出：<br>2</p></blockquote><h3 id="计数"><a href="#计数" class="headerlink" title="计数"></a>计数</h3><p>简单的计数问题，也没啥好说的。</p><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">C++</a></li><li class="tab"><a href="#g_tab0-2">Java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * author: etoa</span></span><br><span class="line"><span class="comment"> * 2021-08-14 12:51:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>)-&gt;sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    getline(<span class="built_in">cin</span>, s);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; c;</span><br><span class="line">    <span class="keyword">char</span> cc = <span class="built_in">islower</span>(c) ? <span class="built_in">toupper</span>(c) : <span class="built_in">tolower</span>(c);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;each : s) &#123;</span><br><span class="line">        <span class="keyword">if</span> (each == c || each == cc) res++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="g_tab0-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * author: etoa</span></span><br><span class="line"><span class="comment"> * 2021-08-14 13:03:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String s = in.nextLine();</span><br><span class="line">        <span class="keyword">char</span> c = in.next().charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">char</span> cc = Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c);</span><br><span class="line">        <span class="keyword">char</span>[] ar = s.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> each : ar) &#123;</span><br><span class="line">            <span class="keyword">if</span> (each == c || each == cc) &#123;</span><br><span class="line">                res ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><div class="note primary">            <p><strong>原题链接：</strong> <a href="https://www.nowcoder.com/practice/a35ce98431874e3a820dbe4b2d0508b1?tpId=37&&tqId=21225&rp=1&ru=/ta/huawei&qru=/ta/huawei/question-ranking" target="_blank" rel="noopener">HJ2. 计算某字母出现次数</a></p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;入门题，字符计数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="指尖飞舞" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/"/>
    
      <category term="算法" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/"/>
    
      <category term="NowCoder" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/NowCoder/"/>
    
      <category term="华为机试题库" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/NowCoder/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95%E9%A2%98%E5%BA%93/"/>
    
    
      <category term="算法" scheme="https://accepted.org.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="字符串" scheme="https://accepted.org.cn/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="NowCoder" scheme="https://accepted.org.cn/tags/NowCoder/"/>
    
      <category term="华为机试题库" scheme="https://accepted.org.cn/tags/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95%E9%A2%98%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>HJ1. 字符串最后一个单词的长度</title>
    <link href="https://accepted.org.cn/2021/08/14/HJ1-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E9%95%BF%E5%BA%A6/"/>
    <id>https://accepted.org.cn/2021/08/14/HJ1-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E9%95%BF%E5%BA%A6/</id>
    <published>2021-08-14T03:48:52.000Z</published>
    <updated>2021-08-14T13:53:14.963Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>一道简单的字符串题目。</p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>描述</strong><br>计算字符串最后一个单词的长度，单词以空格隔开，字符串长度小于5000。</p><p><strong>输入描述：</strong><br>输入一行，代表要计算的字符串，非空，长度小于5000。</p><p><strong>输出描述：</strong><br>输出一个整数，表示输入字符串最后一个单词的长度。</p><p><strong>示例1</strong></p><blockquote><p>输入：hello nowcoder<br>输出：8<br>说明：最后一个单词为nowcoder，长度为8</p></blockquote><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>这题没啥好说的，拿到最后一个字符串，计算长度即可。</p><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">C++</a></li><li class="tab"><a href="#g_tab0-2">Java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="built_in">string</span> &amp;s)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = s.<span class="built_in">size</span>(), res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] != <span class="string">' '</span>) res++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>)-&gt;sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">for</span> (; getline(<span class="built_in">cin</span>, s);) &#123;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; s &lt;&lt; endl;</span></span><br><span class="line">        solve(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="g_tab0-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * author: etoa</span></span><br><span class="line"><span class="comment"> * 2021-08-14 11:56:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> N = <span class="number">5010</span>;</span><br><span class="line">    <span class="keyword">static</span> String[] stk = <span class="keyword">new</span> String[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> tt = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">for</span> (; in.hasNext(); stk[++tt] = in.next());</span><br><span class="line">        System.out.println(stk[tt].length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><div class="note primary">            <p><strong>原题链接：</strong> <a href="https://www.nowcoder.com/practice/8c949ea5f36f422594b306a2300315da?tpId=37&&tqId=21224&rp=1&ru=/ta/huawei&qru=/ta/huawei/question-ranking" target="_blank" rel="noopener">HJ1. 字符串最后一个单词的长度</a></p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;一道简单的字符串题目。&lt;/p&gt;
    
    </summary>
    
    
      <category term="指尖飞舞" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/"/>
    
      <category term="算法" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/"/>
    
      <category term="NowCoder" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/NowCoder/"/>
    
      <category term="华为机试题库" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/NowCoder/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95%E9%A2%98%E5%BA%93/"/>
    
    
      <category term="算法" scheme="https://accepted.org.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="字符串" scheme="https://accepted.org.cn/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="NowCoder" scheme="https://accepted.org.cn/tags/NowCoder/"/>
    
      <category term="华为机试题库" scheme="https://accepted.org.cn/tags/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95%E9%A2%98%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>我的职场生活笔记</title>
    <link href="https://accepted.org.cn/2021/08/11/%E6%88%91%E7%9A%84%E8%81%8C%E5%9C%BA%E7%94%9F%E6%B4%BB%E7%AC%94%E8%AE%B0/"/>
    <id>https://accepted.org.cn/2021/08/11/%E6%88%91%E7%9A%84%E8%81%8C%E5%9C%BA%E7%94%9F%E6%B4%BB%E7%AC%94%E8%AE%B0/</id>
    <published>2021-08-11T12:30:07.000Z</published>
    <updated>2021-08-11T13:10:26.846Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>职场生活也是一本书，既然读书，就得记笔记。</p><a id="more"></a><h3 id="真诚、亲切、友善"><a href="#真诚、亲切、友善" class="headerlink" title="真诚、亲切、友善"></a>真诚、亲切、友善</h3><p>和朋友，同学一样，同事之间也保持真诚、亲切和友善。</p><h3 id="工作之外，尽量不要提问"><a href="#工作之外，尽量不要提问" class="headerlink" title="工作之外，尽量不要提问"></a>工作之外，尽量不要提问</h3><p>工作之内的提问，属于工作范畴，提问普遍存在，但是注意提问的方式。<br>工作之外的提问，要尽量避免，有时候我会习惯性地提问，这是不对的，因为回答问题，特别是没营养本不该成为问题的问题，很无聊。</p><h3 id="不要涉及个人隐私"><a href="#不要涉及个人隐私" class="headerlink" title="不要涉及个人隐私"></a>不要涉及个人隐私</h3><p>不解释了，这是禁区。同事之间，除了工作，可以聊一些轻松地话题。</p><h3 id="不要议论别人"><a href="#不要议论别人" class="headerlink" title="不要议论别人"></a>不要议论别人</h3><p>好的不好的都避免。</p><p>…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;职场生活也是一本书，既然读书，就得记笔记。&lt;/p&gt;
    
    </summary>
    
    
      <category term="生活" scheme="https://accepted.org.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="https://accepted.org.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>【AcWing算法基础】第二讲-数据结构-栈 AcWing 3302. 表达式求值</title>
    <link href="https://accepted.org.cn/2021/08/10/%E3%80%90AcWing%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E3%80%91%E7%AC%AC%E4%BA%8C%E8%AE%B2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88-AcWing-3302-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/"/>
    <id>https://accepted.org.cn/2021/08/10/%E3%80%90AcWing%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E3%80%91%E7%AC%AC%E4%BA%8C%E8%AE%B2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88-AcWing-3302-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/</id>
    <published>2021-08-10T13:38:00.000Z</published>
    <updated>2021-08-14T15:08:29.016Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>一道表达式求值问题，可以使用非递归的栈解法。</p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>定一个表达式，其中运算符仅包含 $+,-, \times,/$（加 减 乘 整除），可能包含括号，请你求出表达式的最终值。</p><p><strong>注意：</strong></p><ul><li>数据保证给定的表达式合法。</li><li>题目保证符号 - 只作为减号出现，不会作为负号出现，例如，$-1+2$, $(2+2) \times (-(1+1)+2)$ 之类表达式均不会出现。</li><li>题目保证表达式中所有数字均为正整数。</li><li>题目保证表达式在中间计算过程以及结果中，均不超过 $231−1$。</li><li>题目中的整除是指向 $0$ 取整，也就是说对于大于 $0$ 的结果向下取整，例如 $5/3=1$，对于小于 $0$ 的结果向上取整，例如 $5/(1−4)=−1$。</li><li>C++和Java中的整除默认是向零取整；Python中的整除 <code>//</code> 默认向下取整，因此Python的 <code>eval()</code> 函数中的整除也是向下取整，在本题中不能直接使用。</li></ul><p><strong>输入格式</strong><br>共一行，为给定表达式。</p><p><strong>输出格式</strong><br>共一行，为表达式的结果。</p><p><strong>数据范围</strong><br>表达式的长度不超过 105。</p><p><strong>输入样例：</strong></p><blockquote><p>$(2+2) \times (1+1)$</p></blockquote><p><strong>输出样例：</strong></p><blockquote><p>8</p></blockquote><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>我们维护两个栈，一个放操作符号，另一个放数字。<br>原则是这样：</p><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">C++</a></li><li class="tab"><a href="#g_tab0-2">Java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; nums;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; ops;</span><br><span class="line"></span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; pr = &#123;&#123;<span class="string">'+'</span>, <span class="number">1</span>&#125;, &#123;<span class="string">'-'</span>, <span class="number">1</span>&#125;, &#123;<span class="string">'*'</span>, <span class="number">2</span>&#125;, &#123;<span class="string">'/'</span>, <span class="number">2</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">eval</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> b = nums.top(); nums.pop(); <span class="comment">// the top of stk should be the secondary number</span></span><br><span class="line">    <span class="keyword">int</span> a = nums.top(); nums.pop();</span><br><span class="line">    <span class="keyword">char</span> op = ops.top(); ops.pop();</span><br><span class="line">    <span class="keyword">int</span> res;</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="string">'+'</span>) res = a + b;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">'-'</span>) res = a - b;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">'*'</span>) res = a * b;</span><br><span class="line">    <span class="keyword">else</span> res = a / b;</span><br><span class="line">    nums.push(res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>)-&gt;sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">    <span class="keyword">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> c = s[i];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isdigit</span>(c)) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = i;</span><br><span class="line">            <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (; j &lt; n &amp;&amp; <span class="built_in">isdigit</span>(s[j]); j++) &#123;</span><br><span class="line">                x = x * <span class="number">10</span> + (s[j] - <span class="string">'0'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            i = j - <span class="number">1</span>;  <span class="comment">// because i++ later</span></span><br><span class="line">            nums.push(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'('</span>) &#123;</span><br><span class="line">            ops.push(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">')'</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (; ops.top() != <span class="string">'('</span>; eval());</span><br><span class="line">            ops.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// determine the priority</span></span><br><span class="line">            <span class="comment">// compare the operator between the last operator on the stk and current operator</span></span><br><span class="line">            <span class="keyword">for</span> (; ops.<span class="built_in">size</span>() &amp;&amp; ops.top() != <span class="string">'('</span> &amp;&amp; pr[ops.top()] &gt;= pr[c]; eval());</span><br><span class="line">            ops.push(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// the last entity could be a digital, since needs to do eval process once again</span></span><br><span class="line">    <span class="comment">// if the operation stack contains several operations and the previous ops has a lower priority than the later's, we have to loop eval that</span></span><br><span class="line">    <span class="keyword">for</span> (; ops.<span class="built_in">size</span>(); eval());</span><br><span class="line">    <span class="comment">//for (; nums.size(); nums.pop()) cout &lt;&lt; nums.top() &lt;&lt; endl;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; nums.top() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="g_tab0-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LinkedList&lt;Character&gt; ops = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LinkedList&lt;Integer&gt; nums = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">eval</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> b = nums.removeLast();</span><br><span class="line">        <span class="keyword">int</span> a = nums.removeLast();</span><br><span class="line">        <span class="keyword">char</span> op = ops.removeLast();</span><br><span class="line">        <span class="keyword">int</span> res;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">'+'</span>) res = a + b;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">'-'</span>) res = a - b;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">'*'</span>) res = a * b;</span><br><span class="line">        <span class="keyword">else</span> res = a / b;</span><br><span class="line">        nums.addLast(res);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">char</span>[] chs)</span> </span>&#123;</span><br><span class="line">        Map&lt;Character, Integer&gt; pr = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        pr.put(<span class="string">'+'</span>, <span class="number">1</span>);</span><br><span class="line">        pr.put(<span class="string">'-'</span>, <span class="number">1</span>);</span><br><span class="line">        pr.put(<span class="string">'*'</span>, <span class="number">2</span>);</span><br><span class="line">        pr.put(<span class="string">'/'</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">int</span> n = chs.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            Character c = chs[i];</span><br><span class="line">            <span class="keyword">if</span> (Character.isDigit(c)) &#123;</span><br><span class="line">                <span class="keyword">int</span> j = i;</span><br><span class="line">                <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (; j &lt; n &amp;&amp; Character.isDigit(chs[j]); x = x * <span class="number">10</span> + chs[j++] - <span class="string">'0'</span>);</span><br><span class="line">                i = j - <span class="number">1</span>;</span><br><span class="line">                nums.addLast(x);</span><br><span class="line">                <span class="comment">//System.out.println(x);</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'('</span>) &#123;</span><br><span class="line">                ops.addLast(c);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">')'</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (; !ops.isEmpty() &amp;&amp; ops.peekLast() != <span class="string">'('</span>; eval());</span><br><span class="line">                ops.removeLast();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (; !ops.isEmpty() &amp;&amp; ops.peekLast() != <span class="string">'('</span> &amp;&amp; pr.get(ops.peekLast()) &gt;= pr.get(c); eval());</span><br><span class="line">                ops.addLast(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (; !ops.isEmpty(); eval());</span><br><span class="line">        System.out.println(nums.peekLast());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader  br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String s = br.readLine();</span><br><span class="line">        <span class="keyword">char</span>[] chs = s.toCharArray();</span><br><span class="line">        solve(chs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><div class="note primary">            <p><strong>原题链接：</strong> <a href="https://www.acwing.com/problem/content/3305/" target="_blank" rel="noopener">AcWing 3302. 表达式求值</a></p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;一道表达式求值问题，可以使用非递归的栈解法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="指尖飞舞" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/"/>
    
      <category term="算法" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/"/>
    
      <category term="AcWing" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/AcWing/"/>
    
      <category term="算法基础课" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/AcWing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/"/>
    
      <category term="第二讲数据结构" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/AcWing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/%E7%AC%AC%E4%BA%8C%E8%AE%B2%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://accepted.org.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="栈" scheme="https://accepted.org.cn/tags/%E6%A0%88/"/>
    
      <category term="AcWing" scheme="https://accepted.org.cn/tags/AcWing/"/>
    
      <category term="表达式树" scheme="https://accepted.org.cn/tags/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>经验：把hexo博客环境从Windows迁移到Mac</title>
    <link href="https://accepted.org.cn/2021/08/10/%E7%BB%8F%E9%AA%8C%EF%BC%9A%E6%8A%8Ahexo%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E4%BB%8EWindows%E8%BF%81%E7%A7%BB%E5%88%B0Mac/"/>
    <id>https://accepted.org.cn/2021/08/10/%E7%BB%8F%E9%AA%8C%EF%BC%9A%E6%8A%8Ahexo%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E4%BB%8EWindows%E8%BF%81%E7%A7%BB%E5%88%B0Mac/</id>
    <published>2021-08-10T11:10:05.000Z</published>
    <updated>2021-08-10T11:57:39.671Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>记录一下自己把hexo博客环境从Windows迁移到Mac的过程。</p><a id="more"></a><h3 id="Implements"><a href="#Implements" class="headerlink" title="Implements"></a>Implements</h3><ol><li>第一步，准备一碟花生米。</li><li>在Windows环境中，压缩hexo文件夹，拷贝到Mac电脑中。OK，在Windows系统上的操作到此为止。</li><li>接下来咱们在Mac上操作。在Mac上部署hexo需要Homebrew，nvm，node.js(v12.22.4)，hexo.</li><li>安装Homebrew（略）。</li><li>安装nvm（通过Homebrew安装nvm）。<blockquote><p><code>brew install nvm</code><br><code>echo &quot;source $(brew --prefix nvm)/nvm.sh&quot; &gt;&gt; .bash_profile</code><br><code>. ~/.bash_profile</code><br><code>nvm -v</code>查看nvm版本</p></blockquote></li><li>查看当前已安装的node.js版本<blockquote><p><code>nvm list</code><br>如果存在已安装的node.js，建议彻底删除卸载。具体方法略。</p></blockquote></li><li>接下来安装node.js<blockquote><p><code>nvm ls-remote</code> 查看可安装的node.js版本。<br><code>nvm install 12.22.4</code> 不要安装最新版本。<br><code>node -v</code> 查看安装的node版本。<br><code>npm -v</code>  在node安装之后，咱们的npm也默认安装好了。</p></blockquote></li><li>安装hexo，<blockquote><p><code>sudo npm install -g hexo</code></p></blockquote></li><li>到此为止，崭新的hexo环境已配好。咱们可以建一个测试博客。<blockquote><p>cd 到测试文件夹。<br><code>hexo init</code><br><code>hexo g</code><br><code>hexo s</code><br>如果终端显示url及端口号，则说明环境和配置没问题。</p></blockquote></li><li>配置新的SSHkey。因为咱们是用git往GitHub上push代码，那么，配置SSH是有必要的。我建议用新的SSH key。<blockquote><p><code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code><br>前往/Users/etoa/，按command+shift+.显示隐藏文件夹，看有无.ssh文件夹。<br>打开.ssh文件夹，以文本打开id_rsa.pub，将咱们的public key拷贝下来，千万别拷贝id_rsa中的key，这里面是私钥，不能放到GitHub上。<br>打开GitHub官网，登录自己的账号。<br>前往Setting页面，选择SSH and GPG keys。<br>点击New SSH key，将public key复制到这里，并命名。</p></blockquote></li><li>打开第2步拷贝的hexo压缩文件，将themes中的_config.yml中的所有Windows绝对路径替换成当前Mac的路径。</li><li>终端定位到hexo根目录，执行：<blockquote><p><code>hexo s</code><br>见证奇迹的时刻，耶～</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;记录一下自己把hexo博客环境从Windows迁移到Mac的过程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="不亦乐乎" scheme="https://accepted.org.cn/categories/%E4%B8%8D%E4%BA%A6%E4%B9%90%E4%B9%8E/"/>
    
      <category term="博客" scheme="https://accepted.org.cn/categories/%E4%B8%8D%E4%BA%A6%E4%B9%90%E4%B9%8E/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="https://accepted.org.cn/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Hexo" scheme="https://accepted.org.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 611. 有效三角形的个数</title>
    <link href="https://accepted.org.cn/2021/08/04/LeetCode-611-%E6%9C%89%E6%95%88%E4%B8%89%E8%A7%92%E5%BD%A2%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
    <id>https://accepted.org.cn/2021/08/04/LeetCode-611-%E6%9C%89%E6%95%88%E4%B8%89%E8%A7%92%E5%BD%A2%E7%9A%84%E4%B8%AA%E6%95%B0/</id>
    <published>2021-08-04T14:32:11.000Z</published>
    <updated>2021-08-04T14:45:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>一道双指针题目。</p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个包含非负整数的数组，你的任务是统计其中可以组成三角形三条边的三元组个数。</p><p><strong>示例 1:</strong></p><blockquote><p>输入: [2,2,3,4]<br>输出: 3<br>解释:<br>有效的组合是:<br>2,3,4 (使用第一个 2)<br>2,3,4 (使用第二个 2)<br>2,2,3</p></blockquote><p><strong>注意:</strong></p><ol><li>数组长度不超过 $1000$。</li><li>数组里整数的范围为 $[0, 1000]$。</li></ol><h3 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h3><p>构成三角形的条件是：三条边中，任意两条边之和大于第三条边。<br>我们可以将原数组排序，依次枚举最长边、次长边和最短边。其中，最长边从小到大枚举即可，次长边和最短边用两个指针维护。两个指针分别初始化为最长边左边第一个数下标和0. 次长边指针从右向左枚举，对于每一个次长边，将最短边指针从左到右枚举，直到找到最小的满足条件的最短边。因为数组是递增的，从最小的满足条件的最短边到次长边都是满足条件的。这样可以实现优化。</p><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">C++</a></li><li class="tab"><a href="#g_tab0-2">Java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">triangleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        sort(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;       <span class="comment">// 枚举最大数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>, k = <span class="number">0</span>; j &gt; <span class="number">0</span> &amp;&amp; k &lt; j; --j) &#123;   <span class="comment">// 枚举次大数</span></span><br><span class="line">                <span class="keyword">for</span> (; k &lt; j &amp;&amp; nums[k] + nums[j] &lt;= nums[i]; ++k);</span><br><span class="line">                res += j - k;</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="g_tab0-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">triangleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;   <span class="comment">// 枚举所有最长边   </span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>, k = <span class="number">0</span>; k &lt; j &amp;&amp; j &gt; <span class="number">0</span>; --j) &#123;   <span class="comment">// 枚举所有次长边   </span></span><br><span class="line">                <span class="keyword">for</span> (; k &lt; j &amp;&amp; nums[k] + nums[j] &lt;= nums[i]; ++k); <span class="comment">// 排除所有不满足条件的最短边   </span></span><br><span class="line">                res += j - k;   <span class="comment">// 从 k 到 j - 1 这一段都是满足的</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><p><strong>复杂度：</strong> 最坏情况下是 $n^2$，实际情况是每一个最长边，可能存在一段 $k$ 到 $j - 1$ 是满足条件的而不用遍历</p><div class="note primary">            <p><strong>原题链接：</strong> <a href="https://leetcode-cn.com/problems/valid-triangle-number/" target="_blank" rel="noopener">LeetCode 611. 有效三角形的个数</a></p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;一道双指针题目。&lt;/p&gt;
    
    </summary>
    
    
      <category term="指尖飞舞" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/"/>
    
      <category term="算法" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/LeetCode/"/>
    
    
      <category term="算法" scheme="https://accepted.org.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://accepted.org.cn/tags/LeetCode/"/>
    
      <category term="双指针" scheme="https://accepted.org.cn/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 14. 最长公共前缀</title>
    <link href="https://accepted.org.cn/2021/08/01/LeetCode-14-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/"/>
    <id>https://accepted.org.cn/2021/08/01/LeetCode-14-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</id>
    <published>2021-08-01T13:56:54.000Z</published>
    <updated>2021-08-04T14:36:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>很简单的模拟题，如果换成公共子序列那就复杂了。 </p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</p><p><strong>示例 1：</strong></p><p>输入：strs = [“flower”,”flow”,”flight”]<br>输出：”fl”</p><p><strong>示例 2：</strong></p><p>输入：strs = [“dog”,”racecar”,”car”]<br>输出：””<br>解释：输入不存在公共前缀。</p><p><strong>提示：</strong></p><ul><li>$0 &lt;= strs.length &lt;= 200$</li><li>$0 &lt;= strs[i].length &lt;= 200$</li><li>$strs[i]$ 仅由小写英文字母组成</li></ul><h3 id="按列比较"><a href="#按列比较" class="headerlink" title="按列比较"></a>按列比较</h3><p>可以拿第一个字符串作为比较对象，维护一个单指针，当单指针超出第一个字符串的下标范围则可以认为第一个字符串就是所有字符串中最短的，且是公共前缀；<br>否则拿当前指针指向的第一个字符串的字符和所有字符串该位置的字符比较，一旦出现不匹配的情况那到此为指针前面的所有前缀串就是最长公共子串。</p><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">C++</a></li><li class="tab"><a href="#g_tab0-2">Java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestCommonPrefix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; ss)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = ss.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (!n) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="built_in">string</span> res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= ss[<span class="number">0</span>].<span class="built_in">size</span>()) &#123;</span><br><span class="line">                <span class="keyword">return</span> ss[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">char</span> c = ss[<span class="number">0</span>][i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ss[j][i] != c) &#123;</span><br><span class="line">                    <span class="keyword">return</span> res;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res += c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="g_tab0-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] ss)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = ss.length;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= ss[<span class="number">0</span>].length()) <span class="keyword">return</span> ss[<span class="number">0</span>];    <span class="comment">// 第一个字符串在所有串中最短</span></span><br><span class="line">            <span class="keyword">char</span> c = ss[<span class="number">0</span>].charAt(i);</span><br><span class="line">            <span class="keyword">for</span> (String s : ss) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt;= s.length() || s.charAt(i) != c) <span class="keyword">return</span> res.toString();</span><br><span class="line">            &#125;</span><br><span class="line">            res.append(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><p>复杂度：最坏的情况下，需要将每一个字符枚举到，所以复杂度为所有字符的数量之和。</p><div class="note primary">            <p><strong>原题链接：</strong> <a href="https://leetcode-cn.com/problems/longest-common-prefix/" target="_blank" rel="noopener">LeetCode 14. 最长公共前缀</a></p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;很简单的模拟题，如果换成公共子序列那就复杂了。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="指尖飞舞" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/"/>
    
      <category term="算法" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/LeetCode/"/>
    
    
      <category term="算法" scheme="https://accepted.org.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://accepted.org.cn/tags/LeetCode/"/>
    
      <category term="字符串" scheme="https://accepted.org.cn/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 274. H指数</title>
    <link href="https://accepted.org.cn/2021/07/11/LeetCode-274-H%E6%8C%87%E6%95%B0/"/>
    <id>https://accepted.org.cn/2021/07/11/LeetCode-274-H%E6%8C%87%E6%95%B0/</id>
    <published>2021-07-11T05:13:26.000Z</published>
    <updated>2021-07-11T05:38:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>题目有点绕，好在一遍A。</p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一位研究者论文被引用次数的数组（被引用次数是非负整数）。编写一个方法，计算出研究者的 $h$ 指数。</p><p><strong>h 指数的定义：</strong> $h$ 代表“高引用次数”（high citations），一名科研人员的 $h$ 指数是指他（她）的 （N 篇论文中）<strong>总共</strong> 有 $h$ 篇论文分别被引用了<strong>至少</strong> $h$ 次。且其余的 $N - h$ 篇论文每篇被引用次数 <strong>不超过</strong> $h$ 次。</p><p>例如：某人的 $h$ 指数是 $20$，这表示他已发表的论文中，每篇被引用了至少 $20$ 次的论文总共有 $20$ 篇。</p><p><strong>示例：</strong></p><blockquote><p>输入：citations = [3,0,6,1,5]<br>输出：3<br>解释：给定数组表示研究者总共有 5 篇论文，每篇论文相应的被引用了 3, 0, 6, 1, 5 次。</p><p>由于研究者有 3 篇论文每篇 至少 被引用了 3 次，其余两篇论文每篇被引用 不多于 3 次，所以她的 h 指数是 3。</p></blockquote><p>提示：如果 $h$ 有多种可能的值，$h$ 指数是其中最大的那个。</p><h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h3><p>题目可以抽象成，在所有的论文当中有 $h$ 篇，其中每篇被引用至少 $h$ 次。</p><p>那么我们就开一个计数数组，对于数组第 $i$ 项，记录引用次数为 $i$ 的论文有多少篇。<br>比如对于示例1，计数数组为：<br>0-1<br>1-1<br>2-0<br>3-1<br>4-0<br>5-1<br>6-1<br>从数组末尾开始遍历，当引用次数对应的篇数不为零时，对应着有效的一项。<br>对于每一个有效项，累加总篇数，和当前下标（即引用次数）比较取最小值 $min$ 就表示当前有 $min$ 篇每篇引用至少 $min$ 次。也就是说每一项都会产生一个新的 $h$ 值，比较所有 $h$ 值取最大者即可。</p><p>Q: 为什么要从计数数组末尾开始遍历？<br>A: 只有从末尾开始遍历，对于每个计数数组中的有效项，累加的篇数和对应下标的引用次数取最小才可以表示成：<br>在当前累加篇数的论文中，每篇引用 <strong>至少</strong> 对应下标次数。从数组开头开始遍历没法表示 <strong>至少</strong>。</p><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">C++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hIndex</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; ci)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mx = *max_element(ci.<span class="built_in">begin</span>(), ci.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">int</span> n = ci.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">cnt</span><span class="params">(mx + <span class="number">10</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            cnt[ci[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//for (int i = 0; i &lt; mx + 10; ++i) cout &lt;&lt; i &lt;&lt; "-"  &lt;&lt; cnt[i] &lt;&lt; endl;</span></span><br><span class="line">        <span class="comment">//return 0;</span></span><br><span class="line">        <span class="keyword">int</span> paper_cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = mx + <span class="number">9</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cnt[i]) &#123;</span><br><span class="line">                paper_cnt += cnt[i];</span><br><span class="line">                <span class="keyword">int</span> tmp = <span class="built_in">min</span>(paper_cnt, i);</span><br><span class="line">                res = <span class="built_in">max</span>(res, tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div><div class="note primary">            <p><strong>原题链接：</strong> <a href="https://leetcode-cn.com/problems/h-index/" target="_blank" rel="noopener">LeetCode 274. H指数</a></p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;题目有点绕，好在一遍A。&lt;/p&gt;
    
    </summary>
    
    
      <category term="指尖飞舞" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/"/>
    
      <category term="算法" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/LeetCode/"/>
    
    
      <category term="算法" scheme="https://accepted.org.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://accepted.org.cn/tags/LeetCode/"/>
    
      <category term="计数排序" scheme="https://accepted.org.cn/tags/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 930. 和相同的二元子数组</title>
    <link href="https://accepted.org.cn/2021/07/08/LeetCode-930-%E5%92%8C%E7%9B%B8%E5%90%8C%E7%9A%84%E4%BA%8C%E5%85%83%E5%AD%90%E6%95%B0%E7%BB%84/"/>
    <id>https://accepted.org.cn/2021/07/08/LeetCode-930-%E5%92%8C%E7%9B%B8%E5%90%8C%E7%9A%84%E4%BA%8C%E5%85%83%E5%AD%90%E6%95%B0%E7%BB%84/</id>
    <published>2021-07-08T03:12:48.000Z</published>
    <updated>2021-07-08T04:42:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>前缀和+TwoSum.</p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个二元数组 $nums$ ，和一个整数 $goal$ ，请你统计并返回有多少个和为 $goal$ 的 <strong>非空</strong> 子数组。</p><p><strong>子数组</strong> 是数组的一段连续部分。</p><p><strong>示例 1：</strong></p><blockquote><p>输入：nums = [1,0,1,0,1], goal = 2<br>输出：4<br>解释：<br>如下面黑体所示，有 4 个满足题目要求的子数组：<br>[<strong>1,0,1</strong> ,0,1]<br>[<strong>1,0,1,0</strong> ,1]<br>[1, <strong>0,1,0,1</strong>]<br>[1,0, <strong>1,0,1</strong>]</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p>输入：nums = [0,0,0,0,0], goal = 0<br>输出：15</p></blockquote><p><strong>提示：</strong></p><ul><li>$1 &lt;= nums.length &lt;= 3 * 10^4$</li><li>$nums[i]$ 不是 $0$ 就是 $1$</li><li>$0 &lt;= goal &lt;= nums.length$</li></ul><hr><h3 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h3><p>因为要求出所有和为特定值的子数组个数，子数组是连续的，所以必然联想到前缀和。</p><p>如果预处理出前缀和数组，再暴力枚举所有子数组，复杂度为 $O(N^2)$，还是会超时。</p><p>考虑到以下标为 $i$ 的数开始，以下标为 $j$ 的数结尾的子数组的和为 $presum[j] - presum[i - 1]$，如果这个数和 $goal$ 相等，那么 $[i, j]$ 的子数组就是满足要求的。</p><p>问题就等价于求出原数组中对于每个下标 $j$，有多少小于等于 $j$ 的下标 $i$，满足:</p><p>$presum[i - 1] + goal = presum[j]$.</p><p>显然这是一个TwoSum问题。<br>我们可以维护一个哈希表，存放所有 $prsum[j]$ 的数量。在之后的遍历中，如果出现当前下标的前缀和减去 $goal$ 已经存在，那么 $j$ 一定和当前下标构成一个满足条件的子数组。</p><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">C++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numSubarraysWithSum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> goal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">presum</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) presum[i] = presum[i - <span class="number">1</span>] + nums[i - <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//for (int i = 0; i &lt; n + 1; i++) cout &lt;&lt; presum[i] &lt;&lt; ' ';</span></span><br><span class="line">        <span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; hash;</span><br><span class="line">        hash[<span class="number">0</span>]++;  <span class="comment">// 第0项左边的虚拟的和为0，和第零项对应，如果第零项恰好等于goal，那么正好和第零项左边的和匹配</span></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            res += hash[presum[i] - goal];</span><br><span class="line">            hash[presum[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div><p>注意每遍历到一个下标，都是先判断当前前缀和减去 $goal$ 是否已存在吗，如果存在就加上存在的数量。那么思考一下数组第 $1$ 个数的情况。</p><p>判断数组第 $1$ 个数对应前缀和减去 $goal$ 是否已存在，它对应的是未出现任何元素之前所有“元素”的和，显然 $0$ 的数量为 $1$，所以 $hash[0]$ 初始化为 $1$.</p><p>这道题和 <a href="https://eetoa.github.io/2021/07/03/【LeetCode周赛247】C-LeetCode-1915-最美子字符串的数目/" target="_blank" rel="noopener">【LeetCode周赛247】C LeetCode 1915. 最美子字符串的数目</a> 非常类似。</p><div class="note primary">            <p><strong>原题链接：</strong> <a href="https://leetcode-cn.com/problems/binary-subarrays-with-sum/" target="_blank" rel="noopener">LeetCode 930. 和相同的二元子数组</a></p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;前缀和+TwoSum.&lt;/p&gt;
    
    </summary>
    
    
      <category term="指尖飞舞" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/"/>
    
      <category term="算法" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/LeetCode/"/>
    
    
      <category term="算法" scheme="https://accepted.org.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://accepted.org.cn/tags/LeetCode/"/>
    
      <category term="哈希表" scheme="https://accepted.org.cn/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
      <category term="前缀和" scheme="https://accepted.org.cn/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 1711. 大餐计数</title>
    <link href="https://accepted.org.cn/2021/07/07/LeetCode-1711-%E5%A4%A7%E9%A4%90%E8%AE%A1%E6%95%B0/"/>
    <id>https://accepted.org.cn/2021/07/07/LeetCode-1711-%E5%A4%A7%E9%A4%90%E8%AE%A1%E6%95%B0/</id>
    <published>2021-07-07T04:55:26.000Z</published>
    <updated>2021-07-07T05:15:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>TwoSum升级版。</p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>大餐</strong> 是指 <strong>恰好包含两道不同餐品</strong> 的一餐，其美味程度之和等于 $2$ 的幂。</p><p>你可以搭配 <strong>任意</strong> 两道餐品做一顿大餐。</p><p>给你一个整数数组 $deliciousness$ ，其中 $deliciousness[i]$ 是第 $i$​​​​​​​​​​​​​​ 道餐品的美味程度，返回你可以用数组中的餐品做出的不同 <strong>大餐</strong> 的数量。结果需要对 $10^9 + 7$ 取余。</p><p>注意，只要餐品下标不同，就可以认为是不同的餐品，即便它们的美味程度相同。</p><p><strong>示例 1：</strong></p><blockquote><p>输入：deliciousness = [1,3,5,7,9]<br>输出：4<br>解释：大餐的美味程度组合为 (1,3) 、(1,7) 、(3,5) 和 (7,9) 。<br>它们各自的美味程度之和分别为 4 、8 、8 和 16 ，都是 2 的幂。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p>输入：deliciousness = [1,1,1,3,3,3,7]<br>输出：15<br>解释：大餐的美味程度组合为 3 种 (1,1) ，9 种 (1,3) ，和 3 种 (1,7) 。</p></blockquote><p><strong>提示：</strong></p><ul><li>$1 &lt;= deliciousness.length &lt;= 10^5$</li><li>$0 &lt;= deliciousness[i] &lt;= 2^{20}$</li></ul><hr><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><p>对于数组中的每个元素，从 $2^0$ 到 $2^{21}$ 依次计算目标值，将目标值放入哈希表计数加一。<br>那么，对于每一个元素需要先从哈希表里面找自己是不是之前某数的目标值，如果是，则结果加上目标值的计数。<br>值得注意的是，$0 &lt;= deliciousness[i] &lt;= 2^{20}$，所以当数组存在多个最大范围的值时，目标值最高可取到  $2^20 + 2^{20}$ 也就是 $2^{21}$.</p><p>我们可以先求出原数组中的最大值，那么对于每个数循环 $[2^0,2^{21}]$ 时，目标值可能的范围在 $0 &lt;= deliciousness[i] &lt;= 2^{20}$，超出可以不考虑，因为数组元素在这个范围，不可能遇到超出范围的。</p><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">C++</a></li><li class="tab"><a href="#g_tab0-2">C++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 2021-7-7 13:15:21</span></span><br><span class="line"><span class="comment"> * author: etoa</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">auto</span> <span class="built_in">shutdown</span> = []()&#123;</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>)-&gt;sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">ksm</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; b; a = a * a, b &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (b &amp; <span class="number">1</span>) res = res * a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countPairs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = d.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; target;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">21</span>; i++) &#123;</span><br><span class="line">            target.push_back(ksm(<span class="number">2</span>, i));</span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">int</span> mx = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">            mx = <span class="built_in">max</span>(mx, d[i]);</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt; hash; <span class="comment">// expected - cnt</span></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hash.count(d[i])) &#123;</span><br><span class="line">                res += hash[d[i]];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; d[i] &lt;&lt; "---" &lt;&lt; endl;</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">21</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (target[j] - d[i] &gt; mx) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span> (target[j] - d[i] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    hash[target[j] - d[i]]++;</span><br><span class="line">                    <span class="comment">//cout &lt;&lt; target[j] - d[i] &lt;&lt; '-' &lt;&lt; hash[target[j] - d[i]] &lt;&lt; endl;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> res % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="g_tab0-2"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 优化：快速幂可以用位运算代替；</span></span><br><span class="line"><span class="comment"> * 求数组最值可以使用max_element;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">auto</span> <span class="built_in">shutdown</span> = []()&#123;</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>)-&gt;sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countPairs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = d.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; target;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">21</span>; i++) &#123;</span><br><span class="line">            target.push_back(<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">int</span> mx = *max_element(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt; hash; <span class="comment">// expected - cnt</span></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hash.count(d[i])) &#123;</span><br><span class="line">                res += hash[d[i]];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; d[i] &lt;&lt; "---" &lt;&lt; endl;</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">21</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (target[j] - d[i] &gt; mx) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span> (target[j] - d[i] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    hash[target[j] - d[i]]++;</span><br><span class="line">                    <span class="comment">//cout &lt;&lt; target[j] - d[i] &lt;&lt; '-' &lt;&lt; hash[target[j] - d[i]] &lt;&lt; endl;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> res % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div><div class="note primary">            <p><strong>原题链接：</strong> <a href="https://leetcode-cn.com/problems/count-good-meals/" target="_blank" rel="noopener">LeetCode 1711. 大餐计数</a></p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;TwoSum升级版。&lt;/p&gt;
    
    </summary>
    
    
      <category term="指尖飞舞" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/"/>
    
      <category term="算法" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/LeetCode/"/>
    
    
      <category term="算法" scheme="https://accepted.org.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://accepted.org.cn/tags/LeetCode/"/>
    
      <category term="哈希表" scheme="https://accepted.org.cn/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 1418. 点菜展示表</title>
    <link href="https://accepted.org.cn/2021/07/06/LeetCode-1418-%E7%82%B9%E8%8F%9C%E5%B1%95%E7%A4%BA%E8%A1%A8/"/>
    <id>https://accepted.org.cn/2021/07/06/LeetCode-1418-%E7%82%B9%E8%8F%9C%E5%B1%95%E7%A4%BA%E8%A1%A8/</id>
    <published>2021-07-06T05:54:21.000Z</published>
    <updated>2021-07-07T05:18:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>使用有序集合和有序map简化代码。</p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个数组 $orders$，表示客户在餐厅中完成的订单。</p><p>确切地说， $orders[i]=[customerNamei,tableNumberi,foodItemi]$ ，其中 $customerNamei$ 是客户的姓名，$tableNumberi$ 是客户所在餐桌的桌号，而 $foodItemi$ 是客户点的餐品名称。</p><p>请你返回该餐厅的 <strong>点菜展示表</strong> 。在这张表中，表中第一行为标题，其第一列为餐桌桌号 “Table” ，后面每一列都是按字母顺序排列的餐品名称。接下来每一行中的项则表示每张餐桌订购的相应餐品数量，第一列应当填对应的桌号，后面依次填写下单的餐品数量。</p><p>注意：客户姓名不是点菜展示表的一部分。此外，表中的数据行应该按餐桌桌号升序排列。</p><p><strong>示例 1：</strong></p><blockquote><p>输入：orders = [[“David”,”3”,”Ceviche”],[“Corina”,”10”,”Beef Burrito”],[“David”,”3”,”Fried Chicken”],[“Carla”,”5”,”Water”],[“Carla”,”5”,”Ceviche”],[“Rous”,”3”,”Ceviche”]]<br>输出：[[“Table”,”Beef Burrito”,”Ceviche”,”Fried Chicken”,”Water”],[“3”,”0”,”2”,”1”,”0”],[“5”,”0”,”1”,”0”,”1”],[“10”,”1”,”0”,”0”,”0”]]<br>解释：<br>点菜展示表如下所示：</p><table><thead><tr><th align="left">Table</th><th align="left">Beef Burrito</th><th align="left">Ceviche</th><th align="left">Fried Chicken</th><th align="left">Water</th></tr></thead><tbody><tr><td align="left">3</td><td align="left">0</td><td align="left">2</td><td align="left">1</td><td align="left">0</td></tr><tr><td align="left">5</td><td align="left">0</td><td align="left">1</td><td align="left">0</td><td align="left">1</td></tr><tr><td align="left">10</td><td align="left">1</td><td align="left">0</td><td align="left">0</td><td align="left">0</td></tr></tbody></table><p>对于餐桌 3：David 点了 “Ceviche” 和 “Fried Chicken”，而 Rous 点了 “Ceviche”<br>而餐桌 5：Carla 点了 “Water” 和 “Ceviche”<br>餐桌 10：Corina 点了 “Beef Burrito” </p></blockquote><p><strong>示例 2：</strong></p><blockquote><p>输入：orders = [[“James”,”12”,”Fried Chicken”],[“Ratesh”,”12”,”Fried Chicken”],[“Amadeus”,”12”,”Fried Chicken”],[“Adam”,”1”,”Canadian Waffles”],[“Brianna”,”1”,”Canadian Waffles”]]<br>输出：[[“Table”,”Canadian Waffles”,”Fried Chicken”],[“1”,”2”,”0”],[“12”,”0”,”3”]]<br>解释：<br>对于餐桌 1：Adam 和 Brianna 都点了 “Canadian Waffles”<br>而餐桌 12：James, Ratesh 和 Amadeus 都点了 “Fried Chicken”</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p>输入：orders = [[“Laura”,”2”,”Bean Burrito”],[“Jhon”,”2”,”Beef Burrito”],[“Melissa”,”2”,”Soda”]]<br>输出：[[“Table”,”Bean Burrito”,”Beef Burrito”,”Soda”],[“2”,”1”,”1”,”1”]]</p></blockquote><p><strong>提示：</strong></p><ul><li>$1 &lt;= orders.length &lt;= 5 \times 10^4$</li><li>$orders[i].length = 3$</li><li>$1 &lt;= customerNamei.length, foodItemi.length &lt;= 20$</li><li>$customerNamei$ 和 $foodItemi$ 由大小写英文字母及空格字符 <code>&#39; &#39;</code> 组成。</li><li>$tableNumberi$ 是 $1$ 到 $500$ 范围内的整数。</li></ul><hr><h3 id="模拟"><a href="#模拟" class="headerlink" title="模拟"></a>模拟</h3><p>构建一个桌号数组，数组中放入有序哈希表。遍历 $orders$ 数组，将桌号对应的菜品放入到对应的哈希表中。</p><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">C++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 2021-7-6 14:11:00</span></span><br><span class="line"><span class="comment"> * author: etoa</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">int</span> N = <span class="number">507</span>;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; table[N];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; <span class="title">displayTable</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt;&amp; orders)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; fooditem;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e : orders) &#123;</span><br><span class="line">            fooditem.insert(e[<span class="number">2</span>]);</span><br><span class="line">            table[stoi(e[<span class="number">1</span>])][e[<span class="number">2</span>]]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; res;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; intro;</span><br><span class="line">        intro.push_back(<span class="string">"Table"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e : fooditem) intro.push_back(e);</span><br><span class="line">        res.push_back(intro);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!table[i].empty()) &#123;</span><br><span class="line">                <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; each_table;</span><br><span class="line">                each_table.push_back(to_string(i));</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e : fooditem) &#123;</span><br><span class="line">                    each_table.push_back(to_string(table[i][e]));</span><br><span class="line">                &#125;</span><br><span class="line">                res.push_back(each_table);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div><div class="note primary">            <p><strong>原题链接：</strong> <a href="https://leetcode-cn.com/problems/display-table-of-food-orders-in-a-restaurant/" target="_blank" rel="noopener">LeetCode 1418. 点菜展示表</a></p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;使用有序集合和有序map简化代码。&lt;/p&gt;
    
    </summary>
    
    
      <category term="指尖飞舞" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/"/>
    
      <category term="算法" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/LeetCode/"/>
    
    
      <category term="算法" scheme="https://accepted.org.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://accepted.org.cn/tags/LeetCode/"/>
    
      <category term="哈希表" scheme="https://accepted.org.cn/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
      <category term="集合" scheme="https://accepted.org.cn/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 726. 原子的数量</title>
    <link href="https://accepted.org.cn/2021/07/06/LeetCode-726-%E5%8E%9F%E5%AD%90%E7%9A%84%E6%95%B0%E9%87%8F/"/>
    <id>https://accepted.org.cn/2021/07/06/LeetCode-726-%E5%8E%9F%E5%AD%90%E7%9A%84%E6%95%B0%E9%87%8F/</id>
    <published>2021-07-05T16:34:58.000Z</published>
    <updated>2021-07-05T16:44:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>很容易想到使用DFS解决问题。</p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个化学式 $formula$（作为字符串），返回每种原子的数量。</p><p>原子总是以一个大写字母开始，接着跟随 $0$ 个或任意个小写字母，表示原子的名字。</p><p>如果数量大于 $1$，原子后会跟着数字表示原子的数量。如果数量等于 $1$ 则不会跟数字。例如，$H2O$ 和 $H2O2$ 是可行的，但 $H1O2$ 这个表达是不可行的。</p><p>两个化学式连在一起是新的化学式。例如 $H2O2He3Mg4$ 也是化学式。</p><p>一个括号中的化学式和数字（可选择性添加）也是化学式。例如 $(H2O2)$ 和 $(H2O2)3$ 是化学式。</p><p>给定一个化学式 $formula$ ，返回所有原子的数量。格式为：第一个（按字典序）原子的名字，跟着它的数量（如果数量大于 $1$），然后是第二个原子的名字（按字典序），跟着它的数量（如果数量大于 $1$），以此类推。</p><p><strong>示例 1：</strong></p><blockquote><p>输入：formula = “H2O”<br>输出：”H2O”<br>解释：<br>原子的数量是 {‘H’: 2, ‘O’: 1}。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p>输入：formula = “Mg(OH)2”<br>输出：”H2MgO2”<br>解释：<br>原子的数量是 {‘H’: 2, ‘Mg’: 1, ‘O’: 2}。</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p>输入：formula = “K4(ON(SO3)2)2”<br>输出：”K4N2O14S4”<br>解释：<br>原子的数量是 {‘K’: 4, ‘N’: 2, ‘O’: 14, ‘S’: 4}。</p></blockquote><p><strong>示例 4：</strong></p><blockquote><p>输入：formula = “Be32”<br>输出：”Be32”</p></blockquote><p><strong>提示：</strong></p><ul><li>$1 &lt;= formula.length &lt;= 1000$</li><li>$formula$ 由小写英文字母、数字 <code>(</code> 和 <code>)</code> 组成。</li><li>$formula$ 是有效的化学式。</li></ul><hr><h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h3><p>本题会遇到嵌套的括号，可以使用递归解决问题。<br>每遇到左括号就进入递归，并计算括号内的原子数量，保存在 <code>map</code> 中。<br>遇到右括号递归终止，返回。<br>回溯阶段判断右括号外的倍数问题，将返回的 <code>map</code> 中原子数目全部乘倍数。<br>因为题目要求使用字典序输出内容，故不使用 <code>unordered_map</code> 而使用 <code>map</code>.</p><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">C++</a></li><li class="tab"><a href="#g_tab0-2">C++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 2021-7-6 00:43:56</span></span><br><span class="line"><span class="comment"> * author: etoa</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">countOfAtoms</span><span class="params">(<span class="built_in">string</span> formula)</span> </span>&#123;</span><br><span class="line">        n = formula.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">auto</span> ordereded_map = dfs(formula, u);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">string</span> res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[atom, cnt] : ordereded_map) &#123;</span><br><span class="line">            res += atom;</span><br><span class="line">            <span class="keyword">if</span> (cnt &gt; <span class="number">1</span>) res += to_string(cnt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    map&lt;string, int&gt; dfs(string &amp;formula, int &amp;u) &#123;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; tres;</span><br><span class="line">        <span class="keyword">for</span> (; u &lt; n;) &#123;</span><br><span class="line">            <span class="keyword">if</span> (formula[u] == <span class="string">'('</span>) &#123;</span><br><span class="line">                ++u;</span><br><span class="line">                <span class="keyword">auto</span> tmap = dfs(formula, u);</span><br><span class="line">                <span class="comment">// checks if current is digits</span></span><br><span class="line">                <span class="keyword">int</span> mul = <span class="number">0</span>, k = u;</span><br><span class="line">                <span class="keyword">for</span> (; k &lt; n &amp;&amp; <span class="built_in">isdigit</span>(formula[k]); ++k) &#123;</span><br><span class="line">                    mul = mul * <span class="number">10</span> + formula[k] - <span class="string">'0'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!mul) ++mul;</span><br><span class="line">                u = k;</span><br><span class="line">                <span class="comment">// merge</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[atom, cnt] : tmap) &#123;</span><br><span class="line">                    tres[atom] += cnt * mul;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (formula[u] == <span class="string">')'</span>) &#123;    <span class="comment">// endof dfs</span></span><br><span class="line">                ++u;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123; </span><br><span class="line">                <span class="keyword">int</span> k = u + <span class="number">1</span>;  <span class="comment">// 从字母的下一位开始</span></span><br><span class="line">                <span class="built_in">string</span> atom;</span><br><span class="line">                <span class="keyword">for</span> (; k &lt; n &amp;&amp; <span class="built_in">islower</span>(formula[k]); ++k);</span><br><span class="line">                <span class="keyword">int</span> atomlen = k - u;</span><br><span class="line">                atom = formula.substr(u, atomlen);</span><br><span class="line">                <span class="comment">//cout &lt;&lt; atom &lt;&lt; endl;</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (; k &lt; n &amp;&amp; <span class="built_in">isdigit</span>(formula[k]); k++) &#123;</span><br><span class="line">                    cnt = cnt * <span class="number">10</span> + formula[k] - <span class="string">'0'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!cnt) ++cnt;</span><br><span class="line">                <span class="comment">//cout &lt;&lt; cnt &lt;&lt; endl;</span></span><br><span class="line">                tres[atom] += cnt;</span><br><span class="line">                u = k;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tres;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="g_tab0-2"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * author: yxc@acwing</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; MPSI;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">MPSI <span class="title">dfs</span><span class="params">(<span class="built_in">string</span>&amp; str, <span class="keyword">int</span>&amp; u)</span> </span>&#123;</span><br><span class="line">        MPSI res;</span><br><span class="line">        <span class="keyword">while</span> (u &lt; str.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str[u] == <span class="string">'('</span>) &#123;</span><br><span class="line">                u ++ ;</span><br><span class="line">                <span class="keyword">auto</span> t = dfs(str, u);</span><br><span class="line">                u ++ ;</span><br><span class="line">                <span class="keyword">int</span> cnt = <span class="number">1</span>, k = u;</span><br><span class="line">                <span class="keyword">while</span> (k &lt; str.<span class="built_in">size</span>() &amp;&amp; <span class="built_in">isdigit</span>(str[k])) k ++ ;</span><br><span class="line">                <span class="keyword">if</span> (k &gt; u) &#123;</span><br><span class="line">                    cnt = stoi(str.substr(u, k - u));</span><br><span class="line">                    u = k;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; [x, y]: t) res[x] += y * cnt;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str[u] == <span class="string">')'</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> k = u + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (k &lt; str.<span class="built_in">size</span>() &amp;&amp; str[k] &gt;= <span class="string">'a'</span> &amp;&amp; str[k] &lt;= <span class="string">'z'</span>) k ++ ;</span><br><span class="line">                <span class="keyword">auto</span> key = str.substr(u, k - u);</span><br><span class="line">                u = k;</span><br><span class="line">                <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (k &lt; str.<span class="built_in">size</span>() &amp;&amp; <span class="built_in">isdigit</span>(str[k])) k ++ ;</span><br><span class="line">                <span class="keyword">if</span> (k &gt; u) &#123;</span><br><span class="line">                    cnt = stoi(str.substr(u, k - u));</span><br><span class="line">                    u = k;</span><br><span class="line">                &#125;</span><br><span class="line">                res[key] += cnt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">countOfAtoms</span><span class="params">(<span class="built_in">string</span> formula)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">auto</span> t = dfs(formula, k);</span><br><span class="line">        <span class="built_in">string</span> res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; [x, y]: t) &#123;</span><br><span class="line">            res += x;</span><br><span class="line">            <span class="keyword">if</span> (y &gt; <span class="number">1</span>) res += to_string(y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div><div class="note primary">            <p><strong>原题链接：</strong> <a href="https://leetcode-cn.com/problems/number-of-atoms/" target="_blank" rel="noopener">LeetCode 726. 原子的数量</a></p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;很容易想到使用DFS解决问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="指尖飞舞" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/"/>
    
      <category term="算法" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/LeetCode/"/>
    
    
      <category term="算法" scheme="https://accepted.org.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://accepted.org.cn/tags/LeetCode/"/>
    
      <category term="DFS" scheme="https://accepted.org.cn/tags/DFS/"/>
    
      <category term="字符串" scheme="https://accepted.org.cn/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="回溯" scheme="https://accepted.org.cn/tags/%E5%9B%9E%E6%BA%AF/"/>
    
  </entry>
  
  <entry>
    <title>【LeetCode周赛248】C LeetCode 5802. 统计好数字的数目</title>
    <link href="https://accepted.org.cn/2021/07/05/%E3%80%90LeetCode%E5%91%A8%E8%B5%9B248%E3%80%91C-LeetCode-5802-%E7%BB%9F%E8%AE%A1%E5%A5%BD%E6%95%B0%E5%AD%97%E7%9A%84%E6%95%B0%E7%9B%AE/"/>
    <id>https://accepted.org.cn/2021/07/05/%E3%80%90LeetCode%E5%91%A8%E8%B5%9B248%E3%80%91C-LeetCode-5802-%E7%BB%9F%E8%AE%A1%E5%A5%BD%E6%95%B0%E5%AD%97%E7%9A%84%E6%95%B0%E7%9B%AE/</id>
    <published>2021-07-04T17:14:16.000Z</published>
    <updated>2021-07-05T03:45:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>经典模意义下快速幂应用。</p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>我们称一个数字字符串是 <strong>好数字</strong> 当它满足（下标从 $0$ 开始）<strong>偶数</strong> 下标处的数字为 <strong>偶数</strong> 且 <strong>奇数</strong> 下标处的数字为 <strong>质数</strong> （$2$，$3$，$5$ 或 $7$）。</p><ul><li>比方说，$2582$ 是好数字，因为偶数下标处的数字（$2$ 和 $8$）是偶数且奇数下标处的数字（$5$ 和 $2$）为质数。但 $3245$ <strong>不是</strong> 好数字，因为 $3$ 在偶数下标处但不是偶数。</li></ul><p>给你一个整数 $n$ ，请你返回长度为 $n$ 且为好数字的数字字符串 <strong>总数</strong> 。由于答案可能会很大，请你将它对 $10^9 + 7$ <strong>取余后返回</strong> 。</p><p>一个 <strong>数字字符串</strong> 是每一位都由 $0$ 到 $9$ 组成的字符串，且可能包含前导 $0$ 。</p><p><strong>示例 1：</strong></p><blockquote><p>输入：n = 1<br>输出：5<br>解释：长度为 1 的好数字包括 “0”，”2”，”4”，”6”，”8” 。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p>输入：n = 4<br>输出：400</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p>输入：n = 50<br>输出：564908303</p></blockquote><p><strong>提示：</strong></p><ul><li>$1 &lt;= n &lt;= 10^{15}$</li></ul><hr><h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><p>对于长度为 $n$ 的数字，偶数位对应着 $0, 2, 4, 6, 8$ 共 $5$ 种选择；奇数位对应着 $2, 3, 5, 7$ 共 $4$ 种选择。</p><p>偶数位共有 $\lceil n / 2 \rceil$ 个，奇数位共有 $\lfloor n / 2 \rfloor$ 个。</p><p>那么答案应该是 $5^{\lceil n / 2 \rceil} \times 4^{\lfloor n / 2 \rfloor} \bmod (10^9 + 7)$.</p><p>使用模意义下的快速幂可以在 $O(log(\lceil n / 2 \rceil + \lfloor n / 2 \rfloor))$ 复杂度内算出。</p><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">C++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> MOD = <span class="number">1'000'000'007</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> LL <span class="title">ksm</span><span class="params">(LL a, LL b, LL MOD)</span> </span>&#123;</span><br><span class="line">        LL res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (b) &#123;</span><br><span class="line">            <span class="keyword">if</span> (b &amp; <span class="number">1</span>) res = res * a % MOD;</span><br><span class="line">            a = a * a % MOD;</span><br><span class="line">            b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countGoodNumbers</span><span class="params">(LL n)</span> </span>&#123;</span><br><span class="line">        LL even = n + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        LL odd = n &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> (ksm(<span class="number">5</span>, even, MOD) * ksm(<span class="number">4</span>, odd, MOD)) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div><div class="note primary">            <p><strong>原题链接：</strong> <a href="https://leetcode-cn.com/problems/count-good-numbers/" target="_blank" rel="noopener">LeetCode 5802. 统计好数字的数目</a></p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;经典模意义下快速幂应用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="指尖飞舞" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/"/>
    
      <category term="算法" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/LeetCode/"/>
    
      <category term="竞赛" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/%E7%AB%9E%E8%B5%9B/"/>
    
      <category term="LeetCode周赛" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/%E7%AB%9E%E8%B5%9B/LeetCode%E5%91%A8%E8%B5%9B/"/>
    
      <category term="248" scheme="https://accepted.org.cn/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/%E7%AB%9E%E8%B5%9B/LeetCode%E5%91%A8%E8%B5%9B/248/"/>
    
    
      <category term="算法" scheme="https://accepted.org.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="https://accepted.org.cn/tags/LeetCode/"/>
    
      <category term="数学" scheme="https://accepted.org.cn/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="竞赛" scheme="https://accepted.org.cn/tags/%E7%AB%9E%E8%B5%9B/"/>
    
      <category term="数论" scheme="https://accepted.org.cn/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="快速幂" scheme="https://accepted.org.cn/tags/%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
  </entry>
  
</feed>

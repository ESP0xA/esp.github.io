<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SysLabs™</title>
  
  <subtitle>System Laboratories</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://csyslabs.github.io/"/>
  <updated>2023-06-25T15:50:07.725Z</updated>
  <id>https://csyslabs.github.io/</id>
  
  <author>
    <name>etoa</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【AcWing算法基础】第二讲-数据结构-堆 AcWing 838. 堆排序</title>
    <link href="https://csyslabs.github.io/2023/06/25/%E3%80%90AcWing%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E3%80%91%E7%AC%AC%E4%BA%8C%E8%AE%B2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%A0%86-AcWing-838-%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    <id>https://csyslabs.github.io/2023/06/25/%E3%80%90AcWing%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E3%80%91%E7%AC%AC%E4%BA%8C%E8%AE%B2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%A0%86-AcWing-838-%E5%A0%86%E6%8E%92%E5%BA%8F/</id>
    <published>2023-06-25T15:44:13.000Z</published>
    <updated>2023-06-25T15:50:07.725Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>堆排序模板题。</p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>输入一个长度为 $n$ 的整数数列，从小到大输出前 $m$ 小的数。</p><p><strong>输入格式</strong><br>第一行包含整数 $n$ 和 $m$。</p><p>第二行包含 $n$ 个整数，表示整数数列。</p><p><strong>输出格式</strong><br>共一行，包含 $m$ 个整数，表示整数数列中前 $m$ 小的数。</p><p><strong>数据范围</strong></p><ul><li>$1≤m≤n≤105$</li><li>$1≤数列中元素≤109$</li></ul><p><strong>输入样例：</strong></p><blockquote><p>5 3<br>4 5 1 3 2</p></blockquote><p><strong>输出样例：</strong></p><blockquote><p>1 2 3</p></blockquote><h3 id><a href="#" class="headerlink" title></a></h3><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">C++</a></li><li class="tab"><a href="#g_tab0-2">Java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="g_tab0-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div></div></div><div class="note primary">            <p><strong>原题链接：</strong> <a href></a></p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;堆排序模板题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="指尖飞舞" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/"/>
    
      <category term="算法" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/"/>
    
      <category term="AcWing" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/AcWing/"/>
    
      <category term="算法基础课" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/AcWing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/"/>
    
      <category term="第二讲数据结构" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/AcWing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/%E7%AC%AC%E4%BA%8C%E8%AE%B2%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://csyslabs.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="https://csyslabs.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="AcWing" scheme="https://csyslabs.github.io/tags/AcWing/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 196. 删除重复的电子邮箱</title>
    <link href="https://csyslabs.github.io/2022/09/18/LeetCode-196-%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E7%9A%84%E7%94%B5%E5%AD%90%E9%82%AE%E7%AE%B1/"/>
    <id>https://csyslabs.github.io/2022/09/18/LeetCode-196-%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E7%9A%84%E7%94%B5%E5%AD%90%E9%82%AE%E7%AE%B1/</id>
    <published>2022-09-18T07:49:57.000Z</published>
    <updated>2023-06-25T16:28:37.583Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>考察字段值不唯一情况下的自连接（全排列映射）。</p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/delete-duplicate-emails/" target="_blank" rel="noopener">LeetCode 196. 删除重复的电子邮箱</a></p><h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><p>通过 <code>Email</code> 字段自连接，生成一张临时表。在这张表中，因为 <code>Email</code> 字段值存在重复，所以会存在交叉映射记录。<br>如对于表 <code>Person</code>:</p><table><thead><tr><th align="center">id</th><th align="center">Email</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><a href="mailto:john@example.com">john@example.com</a></td></tr><tr><td align="center">2</td><td align="center"><a href="mailto:bob@example.com">bob@example.com</a></td></tr><tr><td align="center">3</td><td align="center"><a href="mailto:john@example.com">john@example.com</a></td></tr></tbody></table><p>建立自连接:<br><code>select a.id, a.Email, b.id, b.Email from Person a inner join Person b on a.email = b.email;</code><br>后形成临时表：</p><table><thead><tr><th align="center">id</th><th align="center">Email</th><th align="center">id(1)</th><th align="center">Email(1)</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><a href="mailto:john@example.com">john@example.com</a></td><td align="center">1</td><td align="center"><a href="mailto:john@example.com">john@example.com</a></td></tr><tr><td align="center">3</td><td align="center"><a href="mailto:john@example.com">john@example.com</a></td><td align="center">1</td><td align="center"><a href="mailto:john@example.com">john@example.com</a></td></tr><tr><td align="center">2</td><td align="center"><a href="mailto:bob@example.com">bob@example.com</a></td><td align="center">2</td><td align="center"><a href="mailto:bob@example.com">bob@example.com</a></td></tr><tr><td align="center">1</td><td align="center"><a href="mailto:john@example.com">john@example.com</a></td><td align="center">3</td><td align="center"><a href="mailto:john@example.com">john@example.com</a></td></tr><tr><td align="center">3</td><td align="center"><a href="mailto:john@example.com">john@example.com</a></td><td align="center">3</td><td align="center"><a href="mailto:john@example.com">john@example.com</a></td></tr></tbody></table><p>由上可知，显然只有 <code>Email = bob@example.com</code> 的情况，两张表映射唯一。<br>而对于 <code>Email = john@example.com</code> 的情况，存在 $4$ 种全排列映射情况。</p><p>为了删除重复记录中 <code>id</code> 最大的记录，可以限定条件：<code>a.id &gt; b.id</code></p><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">MySQL</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">delete a from Person as a</span><br><span class="line">inner join Person as b</span><br><span class="line">on a.email &#x3D; b.email and a.id &gt; b.id;</span><br></pre></td></tr></table></figure></div></div></div><div class="note primary">            <p><strong>原题链接：</strong> <a href="https://leetcode.cn/problems/delete-duplicate-emails/" target="_blank" rel="noopener">LeetCode 196. 删除重复的电子邮箱</a></p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;考察字段值不唯一情况下的自连接（全排列映射）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="指尖飞舞" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/"/>
    
      <category term="数据库" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    
      <category term="LeetCode" scheme="https://csyslabs.github.io/tags/LeetCode/"/>
    
      <category term="MySQL" scheme="https://csyslabs.github.io/tags/MySQL/"/>
    
      <category term="数据库" scheme="https://csyslabs.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>【AcWing算法基础】第二讲-数据结构-并查集 AcWing 836. 合并集合</title>
    <link href="https://csyslabs.github.io/2022/09/18/%E3%80%90AcWing%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E3%80%91%E7%AC%AC%E4%BA%8C%E8%AE%B2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%B9%B6%E6%9F%A5%E9%9B%86-AcWing-836-%E5%90%88%E5%B9%B6%E9%9B%86%E5%90%88/"/>
    <id>https://csyslabs.github.io/2022/09/18/%E3%80%90AcWing%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E3%80%91%E7%AC%AC%E4%BA%8C%E8%AE%B2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%B9%B6%E6%9F%A5%E9%9B%86-AcWing-836-%E5%90%88%E5%B9%B6%E9%9B%86%E5%90%88/</id>
    <published>2022-09-18T06:51:54.000Z</published>
    <updated>2023-06-25T16:28:37.583Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>并查集模板题。</p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>一共有 $n$ 个数，编号是 $1∼n$，最开始每个数各自在一个集合中。</p><p>现在要进行 $m$ 个操作，操作共有两种：</p><ol><li><code>M a b</code>，将编号为 $a$ 和 $b$ 的两个数所在的集合合并，如果两个数已经在同一个集合中，则忽略这个操作；</li><li><code>Q a b</code>，询问编号为 $a$ 和 $b$ 的两个数是否在同一个集合中；</li></ol><p><strong>输入格式</strong><br>第一行输入整数 $n$ 和 $m$。</p><p>接下来 $m$ 行，每行包含一个操作指令，指令为 <code>M a b</code> 或 <code>Q a b</code> 中的一种。</p><p><strong>输出格式</strong><br>对于每个询问指令 <code>Q a b</code>，都要输出一个结果，如果 $a$ 和 $b$ 在同一集合内，则输出 <code>Yes</code>，否则输出 <code>No</code>。</p><p>每个结果占一行。</p><p><strong>数据范围</strong><br>$1≤n,m≤10^5$</p><p><strong>输入样例：</strong></p><blockquote><p>4 5<br>M 1 2<br>M 3 4<br>Q 1 2<br>Q 1 3<br>Q 3 4</p></blockquote><p><strong>输出样例：</strong></p><blockquote><p>Yes<br>No<br>Yes</p></blockquote><hr><h3 id="并查集-Union-Find"><a href="#并查集-Union-Find" class="headerlink" title="并查集/Union-Find"></a>并查集/Union-Find</h3><p>并查集用于解决两个不相交集合 <strong>Disjoint Set</strong> 的合并 <strong>Union</strong>，以及查询两个数是否在同一集合中 <strong>Find</strong> 的问题。<br>并查集可以以 $O(1)$ 的时间复杂度合并两个不相交集合，以及近乎 $O(1)$ 的时间复杂度查询两个数是否在同一集合中。</p><p>核心思想：</p><ol><li>维护一个森林 <strong>Forest</strong>，森林中每个节点保存该节点的父节点值。每棵树表示一个集合。</li><li>合并两个集合 <strong>Union</strong>：找到两个集合所对应的树根节点，将其中一棵树的根节点作为另一棵树根节点的子节点。本质上是合并两颗多叉树。</li><li>查找两个数是否在同一集合 <strong>Find</strong>：分别查找两个数对应森林节点的树根节点，判断根节点是否相同。</li></ol><p>路径压缩优化 <strong>Path Compression</strong>：</p><blockquote><p>在实现 <strong>Find</strong> 时，需要根据当前数在树中自底向上找到父节点直到树根。<br>可以在这个过程中压缩路径，即，找到根节点后，将路径中的每个节点的父节点指向根节点。</p></blockquote><p>实现：</p><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">C++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, a, b;</span><br><span class="line"><span class="keyword">char</span> ops;</span><br><span class="line"><span class="keyword">int</span> parent[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_forest</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) parent[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (parent[x] != x) parent[x] = <span class="built_in">find</span>(parent[x]);</span><br><span class="line">    <span class="keyword">return</span> parent[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>)-&gt;sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    init_forest();</span><br><span class="line">    <span class="keyword">for</span> (; m--, <span class="built_in">cin</span> &gt;&gt; ops &gt;&gt; a &gt;&gt; b;) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ops == <span class="string">'M'</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            parent[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">find</span>(a) == <span class="built_in">find</span>(b)) <span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><ol><li>我们令 <code>parent[x] = x</code> 定义 <code>x</code> 为根节点。</li><li>注意在实现 <code>find</code> 函数找根节点时，我们的做法是自底向上递归处理，在递归过程中如果发现当前节点不为根节点的话，就将当前节点的父节点通过递归的方式指向根节点。</li></ol><div class="note primary">            <p><strong>原题链接：</strong> <a href="https://www.acwing.com/problem/content/838/" target="_blank" rel="noopener">AcWing 836. 合并集合</a></p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;并查集模板题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="指尖飞舞" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/"/>
    
      <category term="算法" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/"/>
    
      <category term="AcWing" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/AcWing/"/>
    
      <category term="算法基础课" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/AcWing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/"/>
    
      <category term="第二讲数据结构" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/AcWing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/%E7%AC%AC%E4%BA%8C%E8%AE%B2%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://csyslabs.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="树" scheme="https://csyslabs.github.io/tags/%E6%A0%91/"/>
    
      <category term="AcWing" scheme="https://csyslabs.github.io/tags/AcWing/"/>
    
      <category term="并查集" scheme="https://csyslabs.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="Union-Find" scheme="https://csyslabs.github.io/tags/Union-Find/"/>
    
      <category term="路径压缩" scheme="https://csyslabs.github.io/tags/%E8%B7%AF%E5%BE%84%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
  <entry>
    <title>语言的魅力</title>
    <link href="https://csyslabs.github.io/2022/09/17/%E8%AF%AD%E8%A8%80%E7%9A%84%E9%AD%85%E5%8A%9B/"/>
    <id>https://csyslabs.github.io/2022/09/17/%E8%AF%AD%E8%A8%80%E7%9A%84%E9%AD%85%E5%8A%9B/</id>
    <published>2022-09-17T15:01:25.000Z</published>
    <updated>2023-06-25T16:28:37.567Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong></p><a id="more"></a><ol><li>不知道为啥我觉得他不帅，但真要挑毛病也挑不出来</li><li><h3 id><a href="#" class="headerlink" title></a></h3></li></ol><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">C++</a></li><li class="tab"><a href="#g_tab0-2">Java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="g_tab0-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div></div></div><div class="note primary">            <p><strong>原题链接：</strong> <a href></a></p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>LeetCode 184. 部门工资最高的员工</title>
    <link href="https://csyslabs.github.io/2022/09/17/LeetCode-184-%E9%83%A8%E9%97%A8%E5%B7%A5%E8%B5%84%E6%9C%80%E9%AB%98%E7%9A%84%E5%91%98%E5%B7%A5/"/>
    <id>https://csyslabs.github.io/2022/09/17/LeetCode-184-%E9%83%A8%E9%97%A8%E5%B7%A5%E8%B5%84%E6%9C%80%E9%AB%98%E7%9A%84%E5%91%98%E5%B7%A5/</id>
    <published>2022-09-17T03:32:22.000Z</published>
    <updated>2023-06-25T16:28:37.567Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>考察GROUP BY、多表联查、多字段 IN 查询。</p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/department-highest-salary/" target="_blank" rel="noopener">LeetCode 184. 部门工资最高的员工</a></p><h3 id="GROUP-BY-临时表-多表联查"><a href="#GROUP-BY-临时表-多表联查" class="headerlink" title="GROUP BY + 临时表 + 多表联查"></a>GROUP BY + 临时表 + 多表联查</h3><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">MySQL</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">select d.name as Department, e.name as Employee, e.salary as Salary</span><br><span class="line">from </span><br><span class="line">(</span><br><span class="line">select e.departmentId, max(e.salary) as salary</span><br><span class="line">from Employee as e</span><br><span class="line">group by e.departmentId</span><br><span class="line">) as temp</span><br><span class="line">left join Employee as e </span><br><span class="line">on e.departmentId &#x3D; temp.departmentId</span><br><span class="line">and e.salary &#x3D; temp.salary</span><br><span class="line">left join Department as d </span><br><span class="line">on e.departmentId &#x3D; d.id;</span><br></pre></td></tr></table></figure></div></div></div><p>对 <code>Employee</code> 表 <code>departmentId</code> 字段分组查询最高薪资作为临时表。<br>使用该临时表关联 <code>Employee</code> 查到每个 <code>departmentId</code> 和 最高薪资对应员工信息。<br>同时关联 <code>Department</code> 表查询部门信息。</p><p>左连接的使用：临时表来自于 <code>Employee</code> 表，所以左连接查询右表一定存在值。<br>临时表左连接 <code>Department</code> 表查询部门信息时，右表可能存在空值，我们可以允许。</p><h3 id="GROUP-BY-IN-临时表"><a href="#GROUP-BY-IN-临时表" class="headerlink" title="GROUP BY + IN + 临时表"></a>GROUP BY + IN + 临时表</h3><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">MySQL</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">select d.name as Department, e.name as Employee, e.salary as Salary</span><br><span class="line">from Employee as e</span><br><span class="line">left join Department as d </span><br><span class="line">on e.departmentId &#x3D; d.id</span><br><span class="line">where (e.departmentId, e.salary) in</span><br><span class="line">(</span><br><span class="line">    select departmentId, max(salary) as salary</span><br><span class="line">    from Employee </span><br><span class="line">    group by departmentId</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div></div></div><p>先关联 <code>Employee</code> 和 <code>Department</code> 两张表组合成一张大表，再使用 <code>IN</code> 条件限定范围。<br>使用 <code>GROUP BY</code> 对 <code>Employee</code> 表按照 <code>DepartmentId</code> 分组求最大薪资划定限定范围。</p><p>有趣的是多字段 <code>IN</code> 的使用。</p><div class="note primary">            <p><strong>原题链接：</strong> <a href="https://leetcode.cn/problems/department-highest-salary/" target="_blank" rel="noopener">LeetCode 184. 部门工资最高的员工</a></p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;考察GROUP BY、多表联查、多字段 IN 查询。&lt;/p&gt;
    
    </summary>
    
    
      <category term="指尖飞舞" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/"/>
    
      <category term="数据库" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    
      <category term="LeetCode" scheme="https://csyslabs.github.io/tags/LeetCode/"/>
    
      <category term="MySQL" scheme="https://csyslabs.github.io/tags/MySQL/"/>
    
      <category term="数据库" scheme="https://csyslabs.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>【AcWing算法基础】第二讲-数据结构-Trie AcWing 143. 最大异或对</title>
    <link href="https://csyslabs.github.io/2022/09/16/%E3%80%90AcWing%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E3%80%91%E7%AC%AC%E4%BA%8C%E8%AE%B2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-Trie-AcWing-143-%E6%9C%80%E5%A4%A7%E5%BC%82%E6%88%96%E5%AF%B9/"/>
    <id>https://csyslabs.github.io/2022/09/16/%E3%80%90AcWing%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E3%80%91%E7%AC%AC%E4%BA%8C%E8%AE%B2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-Trie-AcWing-143-%E6%9C%80%E5%A4%A7%E5%BC%82%E6%88%96%E5%AF%B9/</id>
    <published>2022-09-16T13:50:45.000Z</published>
    <updated>2023-06-25T16:28:37.567Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>Trie字典树不仅可以存储字符串，也可以存储二进制数，所以理论上Trie可以存储任意信息。</p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>在给定的 $N$ 个整数 $A_1，A_2……A_N$ 中选出两个进行 $xor$（异或）运算，得到的结果最大是多少？</p><p><strong>输入格式</strong><br>第一行输入一个整数 $N$。</p><p>第二行输入 $N$ 个整数 $A_1～A_N$。</p><p><strong>输出格式</strong><br>输出一个整数表示答案。</p><p><strong>数据范围</strong><br>$1≤N≤10^5$,</p><p>$0≤A_i&lt;2^{31}$</p><p><strong>输入样例：</strong></p><blockquote><p>3<br>1 2 3</p></blockquote><p><strong>输出样例：</strong></p><blockquote><p>3</p></blockquote><hr><h3 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h3><p>暴力做法是遍历数组，对每个数，在剩余数中遍历找到和它异或最大的值。</p><p>可以对遍历找到最大异或值的步骤进行优化。</p><p>如果不考虑最大异或值的取值范围，某个数最大异或值，一定是其二进制每一位都不同的数。然而在这里取值范围是所有其他的数。</p><p>对该数二进制从左到右，我们在剩余数中找到一个数，使得其对应位的二进制值不同，如果没有则取相同。</p><p>可以使用 <code>Trie</code> 实现。构建 <code>Trie</code> 时，将每个数的二进制位从根节点开始插入。<br>查询某个数的最大异或值时，从根节点查找，如果存在二进制值相反的节点则选择该节点，不存在则选择二进制值相同的节点。</p><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">C++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100009</span>;</span><br><span class="line"><span class="keyword">int</span> n, numbers[N];</span><br><span class="line"><span class="keyword">int</span> trie[<span class="number">31</span> * N][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_trie</span><span class="params">(<span class="keyword">int</span> &amp;num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">30</span>; ~i; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = num &gt;&gt; i &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (!trie[p][u]) trie[p][u] = ++idx;</span><br><span class="line">        p = trie[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> &amp;num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">    ll target = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">30</span>; ~i; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = num &gt;&gt; i &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (trie[p][!u]) </span><br><span class="line">        &#123;</span><br><span class="line">            target = (target &lt;&lt; <span class="number">1</span>) + !u;</span><br><span class="line">            p = trie[p][!u];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            target = (target &lt;&lt; <span class="number">1</span>) + u;</span><br><span class="line">            p = trie[p][u];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>)-&gt;sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">cin</span> &gt;&gt; numbers[i];</span><br><span class="line">    </span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> cur = numbers[i];</span><br><span class="line">        build_trie(cur);</span><br><span class="line">        res = <span class="built_in">max</span>(res, query(cur) ^ cur);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><p>我们选择的是先对每个数拆分成二进制构建 <code>Trie</code>，再对每个数从 <code>Trie</code> 中查询最大异或值。<br>注意下 <code>Trie</code> 数组取值，因为最多 $10^5$ 个数，每个数最多 $31$ 位，所以数组行最多 $10^5 \times 31$，因为每个节点只存在两种值，$0$ 和 $1$，所以数组列为 $2$.</p><div class="note primary">            <p><strong>原题链接：</strong> <a href="https://www.acwing.com/problem/content/description/145/" target="_blank" rel="noopener">AcWing 143. 最大异或对</a></p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;Trie字典树不仅可以存储字符串，也可以存储二进制数，所以理论上Trie可以存储任意信息。&lt;/p&gt;
    
    </summary>
    
    
      <category term="指尖飞舞" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/"/>
    
      <category term="算法" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/"/>
    
      <category term="AcWing" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/AcWing/"/>
    
      <category term="算法基础课" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/AcWing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/"/>
    
      <category term="第二讲数据结构" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/AcWing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/%E7%AC%AC%E4%BA%8C%E8%AE%B2%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://csyslabs.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="AcWing" scheme="https://csyslabs.github.io/tags/AcWing/"/>
    
      <category term="字典树" scheme="https://csyslabs.github.io/tags/%E5%AD%97%E5%85%B8%E6%A0%91/"/>
    
      <category term="Trie" scheme="https://csyslabs.github.io/tags/Trie/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 183. 从不订购的客户</title>
    <link href="https://csyslabs.github.io/2022/09/16/LeetCode-183-%E4%BB%8E%E4%B8%8D%E8%AE%A2%E8%B4%AD%E7%9A%84%E5%AE%A2%E6%88%B7/"/>
    <id>https://csyslabs.github.io/2022/09/16/LeetCode-183-%E4%BB%8E%E4%B8%8D%E8%AE%A2%E8%B4%AD%E7%9A%84%E5%AE%A2%E6%88%B7/</id>
    <published>2022-09-16T09:20:21.000Z</published>
    <updated>2023-06-25T16:28:37.567Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>NOT IN子查询、左连接的使用。</p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/customers-who-never-order/" target="_blank" rel="noopener">LeetCode 183. 从不订购的客户</a></p><h3 id="NOT-IN-子查询"><a href="#NOT-IN-子查询" class="headerlink" title="NOT IN 子查询"></a>NOT IN 子查询</h3><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">MySQL</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select Name as Customers from Customers </span><br><span class="line">where Id not in </span><br><span class="line">(</span><br><span class="line">    select distinct(CustomerId) from Orders</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div></div></div><p>从客户表中查询所有不在订单表中的 <code>Id</code>，可以使用 <code>NOT IN</code> 子查询。</p><h3 id="左连接"><a href="#左连接" class="headerlink" title="左连接"></a>左连接</h3><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">MySQL</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select Name as Customers from Customers as c </span><br><span class="line">left join Orders as o </span><br><span class="line">on c.Id &#x3D; o.CustomerId</span><br><span class="line">where o.CustomerId is null;</span><br></pre></td></tr></table></figure></div></div></div><p>根据左连接的特性，将两表连接，如果右表字段值不存在，则左表对应字段值保留，右表对应字段值为 <code>null</code>.</p><div class="note primary">            <p><strong>原题链接：</strong> <a href="https://leetcode.cn/problems/customers-who-never-order/" target="_blank" rel="noopener">LeetCode 183. 从不订购的客户</a></p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;NOT IN子查询、左连接的使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="指尖飞舞" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/"/>
    
      <category term="数据库" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    
      <category term="LeetCode" scheme="https://csyslabs.github.io/tags/LeetCode/"/>
    
      <category term="MySQL" scheme="https://csyslabs.github.io/tags/MySQL/"/>
    
      <category term="数据库" scheme="https://csyslabs.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>MySQL妙妙屋</title>
    <link href="https://csyslabs.github.io/2022/09/16/MySQL%E5%A6%99%E5%A6%99%E5%B1%8B/"/>
    <id>https://csyslabs.github.io/2022/09/16/MySQL%E5%A6%99%E5%A6%99%E5%B1%8B/</id>
    <published>2022-09-16T07:24:41.000Z</published>
    <updated>2023-06-25T16:28:37.567Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>记录MySQL零碎知识。</p><a id="more"></a><h4 id="1-MySQL语句执行顺序"><a href="#1-MySQL语句执行顺序" class="headerlink" title="1. MySQL语句执行顺序"></a>1. MySQL语句执行顺序</h4><p>顺口溜：</p><blockquote><p>哪里 <code>WHERE</code> 组队 <code>GROUP BY</code> 有 <code>HAVING</code> 顺序 <code>ORDER BY</code> 限制 <code>LIMIT</code></p></blockquote><p>从一个非常聪明的小伙伴那里学来，可以说是非常绝绝子了。<br>注意包括但不仅限于 <code>FROM</code> <code>ON</code> <code>JOIN</code> 这种虚表创建的基础语句当然优先级最高。</p><h4 id="2-对-GROUP-BY-的理解"><a href="#2-对-GROUP-BY-的理解" class="headerlink" title="2. 对 GROUP BY 的理解"></a>2. 对 GROUP BY 的理解</h4><h5 id="GROUP-BY-单个字段"><a href="#GROUP-BY-单个字段" class="headerlink" title="GROUP BY 单个字段"></a>GROUP BY 单个字段</h5><p>对于每条记录合并分组，确保该字段每组值唯一，构建虚表。<br>对于虚表中的每条记录，该字段对应值是唯一的，而其他所有字段值则分别构成容器（不去重）。因为其他字段可能存在重复，所以使用 SELECT 查询虚表时，只能使用聚合函数如 <code>SUM</code>, <code>AVG</code>等等对容器进行操作。<br>举例：对于数据库 <code>name_table</code></p><table><thead><tr><th align="center">id</th><th align="center">name</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">a</td></tr><tr><td align="center">2</td><td align="center">b</td></tr><tr><td align="center">3</td><td align="center">b</td></tr></tbody></table><p>执行 <code>GROUP BY name</code> 后形成虚表 <code>name_table_virtual</code></p><table><thead><tr><th align="center">id</th><th align="center">name</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">a</td></tr><tr><td align="center">2, 3</td><td align="center">b</td></tr></tbody></table><p>对虚表执行 <code>SELECT</code> 筛选操作：<br><code>SELECT COUNT(id) as cnt, name from name_table GROUP BY name WHERE name = &#39;b&#39;;</code></p><p>结果：</p><table><thead><tr><th align="center">cnt</th><th align="center">name</th></tr></thead><tbody><tr><td align="center">2</td><td align="center">b</td></tr></tbody></table><p>注意，这里如果执行 <code>COUNT(name)</code> 数量依旧是 <code>2</code>，因为虽然被 <code>GROUP BY</code> 的字段在虚表中值唯一，但是记录依然是两条。<br><code>COUNT</code> 计算的是记录数量而不是值数量。</p><h4 id="GROUP-BY-多个字段"><a href="#GROUP-BY-多个字段" class="headerlink" title="GROUP BY 多个字段"></a>GROUP BY 多个字段</h4><p>对于每条记录合并分组，确保该多个字段看成一个整体后每组值唯一，构建虚表。<br>对于虚表中的每条记录，改多个字段构成一个整体后，值唯一。而其他所有字段值则分别构成容器（不去重）。因为其他字段可能存在重复，所以使用 <code>SELECT</code> 查询虚表时，只能使用聚合函数如 <code>SUM</code>, <code>AVG</code>等等对容器进行操作。</p><p>举例：对于数据库 <code>info_table</code></p><table><thead><tr><th align="center">id</th><th align="center">name</th><th align="center">title</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">a</td><td align="center">m</td></tr><tr><td align="center">2</td><td align="center">b</td><td align="center">n</td></tr><tr><td align="center">3</td><td align="center">a</td><td align="center">m</td></tr></tbody></table><p>执行 <code>GROUP BY name, title</code> 后形成虚表 <code>info_table_virtual</code></p><table><thead><tr><th align="center">id</th><th align="center">name</th><th align="center">title</th></tr></thead><tbody><tr><td align="center">1,3</td><td align="center">a</td><td align="center">m</td></tr><tr><td align="center">2</td><td align="center">b</td><td align="center">n</td></tr></tbody></table><p>对虚表执行 <code>SELECT</code> 筛选操作：<br><code>SELECT COUNT(id) as cnt, name, title from info_table GROUP BY name, title;</code></p><p>结果：</p><table><thead><tr><th align="center">cnt</th><th align="center">name</th><th>title</th></tr></thead><tbody><tr><td align="center">2</td><td align="center">a</td><td>m</td></tr><tr><td align="center">1</td><td align="center">b</td><td>n</td></tr></tbody></table><h4 id="3-TODO"><a href="#3-TODO" class="headerlink" title="3. TODO"></a>3. TODO</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;记录MySQL零碎知识。&lt;/p&gt;
    
    </summary>
    
    
      <category term="指尖飞舞" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/"/>
    
      <category term="数据库" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://csyslabs.github.io/tags/MySQL/"/>
    
      <category term="数据库" scheme="https://csyslabs.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 182. 查找重复的电子邮箱</title>
    <link href="https://csyslabs.github.io/2022/09/16/LeetCode-182-%E6%9F%A5%E6%89%BE%E9%87%8D%E5%A4%8D%E7%9A%84%E7%94%B5%E5%AD%90%E9%82%AE%E7%AE%B1/"/>
    <id>https://csyslabs.github.io/2022/09/16/LeetCode-182-%E6%9F%A5%E6%89%BE%E9%87%8D%E5%A4%8D%E7%9A%84%E7%94%B5%E5%AD%90%E9%82%AE%E7%AE%B1/</id>
    <published>2022-09-16T02:38:09.000Z</published>
    <updated>2023-06-25T16:28:37.567Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>考查自连接、GROUP BY、临时表、HAVING子句的使用。</p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/duplicate-emails/" target="_blank" rel="noopener">LeetCode 182. 查找重复的电子邮箱</a></p><h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">MySQL</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Write your MySQL query statement below</span><br><span class="line"></span><br><span class="line">select distinct(a.Email) from Person a inner join Person b </span><br><span class="line">on a.Email &#x3D; b.Email </span><br><span class="line">and a.id !&#x3D; b.id</span><br></pre></td></tr></table></figure></div></div></div><p>使用自连接，因为要找到重复 <code>Email</code>，故可以把 <code>Email</code> 作为连接条件。另外要确保 <code>Id</code> 不同。</p><h3 id="GROUP-BY-临时表"><a href="#GROUP-BY-临时表" class="headerlink" title="GROUP BY + 临时表"></a>GROUP BY + 临时表</h3><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">MySQL</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select temp.email as Email from</span><br><span class="line">(</span><br><span class="line">select Email as email, count(Email) as count from Person </span><br><span class="line">group by Email</span><br><span class="line">) as temp </span><br><span class="line">where temp.count &gt; 1;</span><br></pre></td></tr></table></figure></div></div></div><p>我们的目的是查找重复邮箱，很显然可以想到使用 <code>GROUP BY</code> 对 <code>Email</code> 字段进行合并分组。<code>GROUP BY</code> 后相同 <code>Email</code> 会合并为一组，每组包括所有不同 <code>Id</code>。我们给 <code>Id</code> 计数可得每组数量。<br>将上述操作作为一个子查询生成一张临时表，从该表中选择查询即可得到我们想要的结果。</p><h3 id="GROUP-BY-HAVING-子句"><a href="#GROUP-BY-HAVING-子句" class="headerlink" title="GROUP BY + HAVING 子句"></a>GROUP BY + HAVING 子句</h3><p>我们分组之后可以不借助临时表而是直接使用 <code>HAVING</code> 子句对分组后的状态进行筛选查询:</p><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">MySQL</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select p.Email</span><br><span class="line">from Person as p</span><br><span class="line">group by p.Email </span><br><span class="line">having count(p.id) &gt; 1;</span><br></pre></td></tr></table></figure></div></div></div><div class="note primary">            <p><strong>原题链接：</strong> <a href="https://leetcode.cn/problems/duplicate-emails/" target="_blank" rel="noopener">LeetCode 182. 查找重复的电子邮箱</a></p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;考查自连接、GROUP BY、临时表、HAVING子句的使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="指尖飞舞" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/"/>
    
      <category term="数据库" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    
      <category term="LeetCode" scheme="https://csyslabs.github.io/tags/LeetCode/"/>
    
      <category term="MySQL" scheme="https://csyslabs.github.io/tags/MySQL/"/>
    
      <category term="数据库" scheme="https://csyslabs.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 181. 超过经理收入的员工</title>
    <link href="https://csyslabs.github.io/2022/09/15/LeetCode-181-%E8%B6%85%E8%BF%87%E7%BB%8F%E7%90%86%E6%94%B6%E5%85%A5%E7%9A%84%E5%91%98%E5%B7%A5/"/>
    <id>https://csyslabs.github.io/2022/09/15/LeetCode-181-%E8%B6%85%E8%BF%87%E7%BB%8F%E7%90%86%E6%94%B6%E5%85%A5%E7%9A%84%E5%91%98%E5%B7%A5/</id>
    <published>2022-09-15T15:54:44.000Z</published>
    <updated>2023-06-25T16:28:37.567Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>依然是自连接查询题。</p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/employees-earning-more-than-their-managers/" target="_blank" rel="noopener">LeetCode 181. 超过经理收入的员工</a></p><h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">MySQL</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">a.name as Employee</span><br><span class="line">from Employee a</span><br><span class="line">inner join Employee b</span><br><span class="line">where a.managerId &#x3D; b.id</span><br><span class="line">and a.salary &gt; b.salary;</span><br></pre></td></tr></table></figure></div></div></div><p>因为要用每一项的managerId查询对应薪水，不难想到使用自连接查询，将连接条件设置为id和managerId。使得同一张表的每条记录的id和managerId形成映射关系。</p><div class="note primary">            <p><strong>原题链接：</strong> <a href="https://leetcode.cn/problems/employees-earning-more-than-their-managers/" target="_blank" rel="noopener">LeetCode 181. 超过经理收入的员工</a></p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;依然是自连接查询题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="指尖飞舞" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/"/>
    
      <category term="数据库" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    
      <category term="LeetCode" scheme="https://csyslabs.github.io/tags/LeetCode/"/>
    
      <category term="MySQL" scheme="https://csyslabs.github.io/tags/MySQL/"/>
    
      <category term="数据库" scheme="https://csyslabs.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 180. 连续出现的数字</title>
    <link href="https://csyslabs.github.io/2022/09/15/LeetCode-180-%E8%BF%9E%E7%BB%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>https://csyslabs.github.io/2022/09/15/LeetCode-180-%E8%BF%9E%E7%BB%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E6%95%B0%E5%AD%97/</id>
    <published>2022-09-15T12:24:28.000Z</published>
    <updated>2023-06-25T16:28:37.567Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>自连接查询。</p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/consecutive-numbers/" target="_blank" rel="noopener">LeetCode 180. 连续出现的数字</a></p><h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">MySQL</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select distinct(a.num) as ConsecutiveNums from</span><br><span class="line">Logs a,</span><br><span class="line">Logs b,</span><br><span class="line">Logs c</span><br><span class="line">where</span><br><span class="line">a.num &#x3D; b.num and b.num &#x3D; c.num</span><br><span class="line">and a.id &#x3D; b.id - 1</span><br><span class="line">and b.id &#x3D; c.id - 1;</span><br></pre></td></tr></table></figure></div></div></div><p>连续出现三次以上，则主键连续，且值相等。不难想到使用自连接。<br>注意，考虑到同一个值可能存在多个连续片段，所以我们使用 <code>distinct</code> 关键字。</p><div class="note primary">            <p><strong>原题链接：</strong> <a href="https://leetcode.cn/problems/consecutive-numbers/" target="_blank" rel="noopener">LeetCode 180. 连续出现的数字</a></p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;自连接查询。&lt;/p&gt;
    
    </summary>
    
    
      <category term="指尖飞舞" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/"/>
    
      <category term="数据库" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    
      <category term="LeetCode" scheme="https://csyslabs.github.io/tags/LeetCode/"/>
    
      <category term="MySQL" scheme="https://csyslabs.github.io/tags/MySQL/"/>
    
      <category term="数据库" scheme="https://csyslabs.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 178. 分数排名</title>
    <link href="https://csyslabs.github.io/2022/09/15/LeetCode-178-%E5%88%86%E6%95%B0%E6%8E%92%E5%90%8D/"/>
    <id>https://csyslabs.github.io/2022/09/15/LeetCode-178-%E5%88%86%E6%95%B0%E6%8E%92%E5%90%8D/</id>
    <published>2022-09-15T10:55:16.000Z</published>
    <updated>2023-06-25T16:28:37.567Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>rank类函数使用。</p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode.cn/problems/rank-scores/" target="_blank" rel="noopener">LeetCode 178. 分数排名</a></p><h3 id="rank类函数"><a href="#rank类函数" class="headerlink" title="rank类函数"></a>rank类函数</h3><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">MySQL</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select score,</span><br><span class="line">dense_rank() over (order by score desc) as &#39;rank&#39;</span><br><span class="line">from Scores;</span><br></pre></td></tr></table></figure></div></div></div><p>使用稠密rank函数 <code>dense_rank() over</code> 对 <code>score</code> 字段设置 <code>rank</code>，字段相同值 <code>rank</code> 相同（稠密）。<br>函数后括号中指定设置 <code>rank</code> 所必须的字段排序。</p><div class="note primary">            <p><strong>原题链接：</strong> <a href="https://leetcode.cn/problems/rank-scores/" target="_blank" rel="noopener">LeetCode 178. 分数排名</a></p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;rank类函数使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="指尖飞舞" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/"/>
    
      <category term="数据库" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    
      <category term="LeetCode" scheme="https://csyslabs.github.io/tags/LeetCode/"/>
    
      <category term="MySQL" scheme="https://csyslabs.github.io/tags/MySQL/"/>
    
      <category term="数据库" scheme="https://csyslabs.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>【AcWing算法基础】第二讲-数据结构-Trie AcWing 835. Trie字符串统计</title>
    <link href="https://csyslabs.github.io/2022/09/07/%E3%80%90AcWing%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E3%80%91%E7%AC%AC%E4%BA%8C%E8%AE%B2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-Trie-AcWing-835-Trie%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%9F%E8%AE%A1/"/>
    <id>https://csyslabs.github.io/2022/09/07/%E3%80%90AcWing%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E3%80%91%E7%AC%AC%E4%BA%8C%E8%AE%B2-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-Trie-AcWing-835-Trie%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BB%9F%E8%AE%A1/</id>
    <published>2022-09-07T02:56:22.000Z</published>
    <updated>2023-06-25T16:28:37.567Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>Trie模板题</p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>维护一个字符串集合，支持两种操作：</p><p><code>I</code> <code>x</code> 向集合中插入一个字符串 <code>x</code>；<br><code>Q</code> <code>x</code> 询问一个字符串在集合中出现了多少次。<br>共有 $N$ 个操作，输入的字符串总长度不超过 $10^5$，字符串仅包含小写英文字母。</p><p><strong>输入格式</strong><br>第一行包含整数 $N$，表示操作数。</p><p>接下来 $N$ 行，每行包含一个操作指令，指令为 <code>I</code> <code>x</code> 或 <code>Q</code> <code>x</code> 中的一种。</p><p><strong>输出格式</strong><br>对于每个询问指令 <code>Q</code> <code>x</code>，都要输出一个整数作为结果，表示 <code>x</code> 在集合中出现的次数。</p><p>每个结果占一行。</p><p><strong>数据范围</strong><br>$1 ≤ N ≤ 2 \times 10^4$</p><p><strong>输入样例：</strong></p><blockquote><p>5<br>I abc<br>Q abc<br>Q ab<br>I ab<br>Q ab</p></blockquote><p><strong>输出样例：</strong></p><blockquote><p>1<br>0<br>1</p></blockquote><hr><h3 id="Trie字典树"><a href="#Trie字典树" class="headerlink" title="Trie字典树"></a>Trie字典树</h3><p>使用二维数组构建前缀树，每一个树节点对应二维数组中唯一的行，每行长度 $26$ 对应 $26$ 字母。<br><code>son</code> 数组存放当前节点子节点所在行数。<br>当一个字符串插入到前缀树中时，使用统计数组 <code>cnt</code> 记录当前跟节点对应的字符串数量。<br>使用 <code>idx</code> 记录对全部节点计数，当新的结点出现时，可以知道用二维数组哪一行表示新的节点。</p><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">C++</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"bits/stdc++.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> son[N][<span class="number">26</span>], cnt[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// son buffer -&gt; stores the row of child node </span></span><br><span class="line"><span class="comment">// a d c    a d e</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">build_trie</span><span class="params">(<span class="built_in">string</span> &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, len = s.<span class="built_in">size</span>(); i &lt; len; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = s[i] - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span> (!son[p][c]) son[p][c] = ++idx;</span><br><span class="line">        p = son[p][c];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 以p行结束(叶子节点的"子节点"行)的字符串计数</span></span><br><span class="line">    cnt[p]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="built_in">string</span> &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, len = s.<span class="built_in">size</span>(); i &lt; len; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = s[i] - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span> (!son[p][c]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        p = son[p][c];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt[p];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>)-&gt;sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">string</span> t; <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="built_in">string</span> ops, s;</span><br><span class="line">    <span class="keyword">for</span> (; <span class="built_in">cin</span> &gt;&gt; ops, <span class="built_in">cin</span> &gt;&gt; s;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ops == <span class="string">"I"</span>) build_trie(s);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ops == <span class="string">"Q"</span>) <span class="built_in">cout</span> &lt;&lt; query(s) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><div class="note primary">            <p><strong>原题链接：</strong> <a href="https://www.acwing.com/problem/content/837/" target="_blank" rel="noopener">AcWing 835. Trie字符串统计</a></p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;Trie模板题&lt;/p&gt;
    
    </summary>
    
    
      <category term="指尖飞舞" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/"/>
    
      <category term="算法" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/"/>
    
      <category term="AcWing" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/AcWing/"/>
    
      <category term="算法基础课" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/AcWing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/"/>
    
      <category term="第二讲数据结构" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/AcWing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE/%E7%AC%AC%E4%BA%8C%E8%AE%B2%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://csyslabs.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="AcWing" scheme="https://csyslabs.github.io/tags/AcWing/"/>
    
      <category term="字典树" scheme="https://csyslabs.github.io/tags/%E5%AD%97%E5%85%B8%E6%A0%91/"/>
    
      <category term="Trie" scheme="https://csyslabs.github.io/tags/Trie/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 177. 第N高的薪水</title>
    <link href="https://csyslabs.github.io/2022/04/08/LeetCode-177-%E7%AC%ACN%E9%AB%98%E7%9A%84%E8%96%AA%E6%B0%B4/"/>
    <id>https://csyslabs.github.io/2022/04/08/LeetCode-177-%E7%AC%ACN%E9%AB%98%E7%9A%84%E8%96%AA%E6%B0%B4/</id>
    <published>2022-04-08T03:34:55.000Z</published>
    <updated>2023-06-25T16:28:37.567Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>数据库TopK问题，各种情况和对应方法。</p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode-cn.com/problems/nth-highest-salary/" target="_blank" rel="noopener">LeetCode 177. 第N高的薪水</a></p><h3 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h3><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">MySQL</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT</span><br><span class="line">BEGIN</span><br><span class="line">  set N :&#x3D; N - 1;</span><br><span class="line">  RETURN (</span><br><span class="line">      # Write your MySQL query statement below.</span><br><span class="line">      select SALARY from Employee</span><br><span class="line">      group by SALARY</span><br><span class="line">      order by SALARY desc</span><br><span class="line">      limit 1 offset n</span><br><span class="line">  );</span><br><span class="line">END</span><br></pre></td></tr></table></figure></div></div></div><p>将所有数据按照salary分组，并按照salary由高到低排序。<br>再选取一条数据。<br>又因为我们需要从最高开始第 $N$ 高数据，根据 <code>offset</code> 使用规则，需要偏移 $N - 1$ 位。<br>因为 <code>offset</code> 后面不能跟表达式，只可以跟变量或数字，所以需要提前将 $N$ 设为 $N - 1$.</p><p>该方法效率中等。</p><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">MySQL</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT</span><br><span class="line">BEGIN</span><br><span class="line">  RETURN (</span><br><span class="line">      # Write your MySQL query statement below.</span><br><span class="line">      SELECT </span><br><span class="line">          DISTINCT e.salary</span><br><span class="line">      FROM </span><br><span class="line">          employee e</span><br><span class="line">      WHERE </span><br><span class="line">          (SELECT count(DISTINCT salary) FROM employee WHERE salary&gt;e.salary) &#x3D; N-1</span><br><span class="line">  );</span><br><span class="line">END</span><br></pre></td></tr></table></figure></div></div></div><p>这个方法目前无法理解，主要是子查询中的 where条件。</p><div class="note primary">            <p><strong>原题链接：</strong> <a href="https://leetcode-cn.com/problems/nth-highest-salary/" target="_blank" rel="noopener">LeetCode 177. 第N高的薪水</a></p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;数据库TopK问题，各种情况和对应方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="指尖飞舞" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/"/>
    
      <category term="数据库" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    
      <category term="LeetCode" scheme="https://csyslabs.github.io/tags/LeetCode/"/>
    
      <category term="TopK" scheme="https://csyslabs.github.io/tags/TopK/"/>
    
      <category term="排序" scheme="https://csyslabs.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="MySQL" scheme="https://csyslabs.github.io/tags/MySQL/"/>
    
      <category term="数据库" scheme="https://csyslabs.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="窗口函数" scheme="https://csyslabs.github.io/tags/%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 176. 第二高的薪水</title>
    <link href="https://csyslabs.github.io/2022/04/08/LeetCode-176-%E7%AC%AC%E4%BA%8C%E9%AB%98%E7%9A%84%E8%96%AA%E6%B0%B4/"/>
    <id>https://csyslabs.github.io/2022/04/08/LeetCode-176-%E7%AC%AC%E4%BA%8C%E9%AB%98%E7%9A%84%E8%96%AA%E6%B0%B4/</id>
    <published>2022-04-08T03:27:08.000Z</published>
    <updated>2023-06-25T16:28:37.567Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>数据库TopK问题</p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode-cn.com/problems/second-highest-salary/" target="_blank" rel="noopener">LeetCode 176. 第二高的薪水</a></p><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">MySQL</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">(</span><br><span class="line">select distinct</span><br><span class="line">salary from Employee</span><br><span class="line">order by salary desc</span><br><span class="line">limit 1 offset 1</span><br><span class="line">) as SecondHighestSalary;</span><br></pre></td></tr></table></figure></div></div></div><p>对于子查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select distinct</span><br><span class="line">salary from Employee</span><br><span class="line">order by salary desc</span><br><span class="line">limit 1 offset 1</span><br></pre></td></tr></table></figure><p>将查询产生一个临时数据集，当数据库总行数 &lt;= 1时，由于偏移的作用，将产生一个空集。<br>使用第二次查询可以查到null值，满足题目要求。</p><div class="note primary">            <p><strong>原题链接：</strong> <a href="https://leetcode-cn.com/problems/second-highest-salary/" target="_blank" rel="noopener">LeetCode 176. 第二高的薪水</a></p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;数据库TopK问题&lt;/p&gt;
    
    </summary>
    
    
      <category term="指尖飞舞" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/"/>
    
      <category term="数据库" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    
      <category term="LeetCode" scheme="https://csyslabs.github.io/tags/LeetCode/"/>
    
      <category term="TopK" scheme="https://csyslabs.github.io/tags/TopK/"/>
    
      <category term="MySQL" scheme="https://csyslabs.github.io/tags/MySQL/"/>
    
      <category term="数据库" scheme="https://csyslabs.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>解决BeanDefinitionStoreException: Failed to parse configuration class异常</title>
    <link href="https://csyslabs.github.io/2021/10/08/%E8%A7%A3%E5%86%B3BeanDefinitionStoreException-Failed-to-parse-configuration-class%E5%BC%82%E5%B8%B8/"/>
    <id>https://csyslabs.github.io/2021/10/08/%E8%A7%A3%E5%86%B3BeanDefinitionStoreException-Failed-to-parse-configuration-class%E5%BC%82%E5%B8%B8/</id>
    <published>2021-10-08T08:37:36.000Z</published>
    <updated>2023-06-25T16:28:37.567Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>解决一个由重复生成的bean导致的bean冲突异常。</p><a id="more"></a><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>在某次发版前夕，pull了最新代码之后，项目神奇般的无法启动了，疯狂报“BeanDefinitionStoreException: Failed to parse configuration class异常”，拉取最新代码或者拉取之前迭代的代码都卡在这里。<br>看了一下，在项目编译之后，会在target目录下生成两个相同类。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>执行Mavean的 <code>mvn clean</code> 将临时文件清理即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;解决一个由重复生成的bean导致的bean冲突异常。&lt;/p&gt;
    
    </summary>
    
    
      <category term="指尖飞舞" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/"/>
    
      <category term="工程" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="异常" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E5%B7%A5%E7%A8%8B/%E5%BC%82%E5%B8%B8/"/>
    
    
      <category term="工程" scheme="https://csyslabs.github.io/tags/%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="Maven" scheme="https://csyslabs.github.io/tags/Maven/"/>
    
      <category term="异常" scheme="https://csyslabs.github.io/tags/%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>HJ33. 整数与IP地址之间的转换</title>
    <link href="https://csyslabs.github.io/2021/08/31/HJ33-%E6%95%B4%E6%95%B0%E4%B8%8EIP%E5%9C%B0%E5%9D%80%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
    <id>https://csyslabs.github.io/2021/08/31/HJ33-%E6%95%B4%E6%95%B0%E4%B8%8EIP%E5%9C%B0%E5%9D%80%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/</id>
    <published>2021-08-31T06:09:13.000Z</published>
    <updated>2023-06-25T16:28:37.567Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>一道基于字符串的进制转换问题。</p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>描述</strong><br>原理：ip地址的每段可以看成是一个 $0$-$255$的整数，把每段拆分成一个二进制形式组合起来，然后把这个二进制数转变成一个长整数。<br>举例：一个ip地址为 $10.0.3.193$</p><table><thead><tr><th>每段数字</th><th>相对应的二进制数</th></tr></thead><tbody><tr><td>10</td><td>00001010</td></tr><tr><td>0</td><td>00000000</td></tr><tr><td>3</td><td>00000011</td></tr><tr><td>193</td><td>11000001</td></tr></tbody></table><p>组合起来即为：$00001010$ $00000000$ $00000011$ $11000001$,转换为 $10$ 进制数就是：$167773121$，即该ip地址转换后的数字就是它了。</p><p>本题含有多组输入用例，每组用例需要你将一个ip地址转换为整数、将一个整数转换为ip地址。</p><p><strong>输入描述：</strong></p><blockquote><p>输入<br>1 输入IP地址<br>2 输入10进制型的IP地址</p></blockquote><p><strong>输出描述：</strong></p><blockquote><p>输出<br>1 输出转换成10进制的IP地址<br>2 输出转换后的IP地址</p></blockquote><p><strong>示例1</strong></p><blockquote><p>输入：<br>10.0.3.193<br>167969729</p></blockquote><blockquote><p>输出：<br>167773121<br>10.3.3.193</p></blockquote><h3 id><a href="#" class="headerlink" title></a></h3><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">C++</a></li><li class="tab"><a href="#g_tab0-2">Java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * author: etoa</span></span><br><span class="line"><span class="comment"> * code at: 2021-08-31 14:21:11</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ull <span class="title">s_to_ul_hi</span><span class="params">(<span class="built_in">string</span> &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bitset</span>&lt;<span class="number">32</span>&gt;(s).to_ullong();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ull <span class="title">s_to_ul_lo</span><span class="params">(<span class="built_in">string</span> &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bitset</span>&lt;<span class="number">8</span>&gt;(s).to_ullong();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">to_bin_string_hi</span><span class="params">(ull &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bitset</span>&lt;<span class="number">32</span>&gt;(x).to_string();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">to_bin_string_lo</span><span class="params">(ull &amp;x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bitset</span>&lt;<span class="number">8</span>&gt;(x).to_string();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">num_to_ip</span><span class="params">(ull &amp;num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> bin_str = to_bin_string_hi(num);</span><br><span class="line">    <span class="built_in">string</span> each = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, n = bin_str.<span class="built_in">size</span>(); i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">8</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            each += bin_str[i];</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; s_to_ul_lo(each);</span><br><span class="line">            <span class="keyword">if</span> (i != n - <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">'.'</span>;</span><br><span class="line">            each = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            each += bin_str[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ip_to_num</span><span class="params">(<span class="built_in">string</span> &amp;ip)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> bin_num = <span class="string">""</span>;</span><br><span class="line">    ull x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, n = ip.<span class="built_in">size</span>(); i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = i;</span><br><span class="line">        <span class="keyword">for</span> (; j &lt; n &amp;&amp; ip[j] != <span class="string">'.'</span>; j++) &#123;</span><br><span class="line">            x = x * <span class="number">10</span> + (ip[j] - <span class="string">'0'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        i = j;</span><br><span class="line">        bin_num += to_bin_string_lo(x);</span><br><span class="line">        x = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s_to_ul_hi(bin_num) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="built_in">string</span> &amp;ip, ull &amp;num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ip_to_num(ip);</span><br><span class="line">    num_to_ip(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> ip;</span><br><span class="line">    <span class="keyword">for</span> (; <span class="built_in">cin</span> &gt;&gt; ip;) &#123;</span><br><span class="line">        ull num;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">        solve(ip, num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="g_tab0-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div></div></div><div class="note primary">            <p><strong>原题链接：</strong> <a href></a></p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;一道基于字符串的进制转换问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="指尖飞舞" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/"/>
    
      <category term="算法" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/"/>
    
      <category term="NowCoder" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/NowCoder/"/>
    
      <category term="华为机试题库" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/NowCoder/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95%E9%A2%98%E5%BA%93/"/>
    
    
      <category term="算法" scheme="https://csyslabs.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="字符串" scheme="https://csyslabs.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="进制转换" scheme="https://csyslabs.github.io/tags/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
    
      <category term="NowCoder" scheme="https://csyslabs.github.io/tags/NowCoder/"/>
    
      <category term="华为机试题库" scheme="https://csyslabs.github.io/tags/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95%E9%A2%98%E5%BA%93/"/>
    
      <category term="bitset" scheme="https://csyslabs.github.io/tags/bitset/"/>
    
  </entry>
  
  <entry>
    <title>Maven编译踩坑记录：Maven未识别JDK的问题</title>
    <link href="https://csyslabs.github.io/2021/08/24/Maven%E7%BC%96%E8%AF%91%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95%EF%BC%9AMaven%E6%9C%AA%E8%AF%86%E5%88%ABJDK%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://csyslabs.github.io/2021/08/24/Maven%E7%BC%96%E8%AF%91%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95%EF%BC%9AMaven%E6%9C%AA%E8%AF%86%E5%88%ABJDK%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2021-08-24T02:40:52.000Z</published>
    <updated>2023-06-25T16:28:37.567Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>记一次mvn编译时踩的坑。</p><a id="more"></a><h3 id="情况描述"><a href="#情况描述" class="headerlink" title="情况描述"></a>情况描述</h3><p>当我在使用 <code>mvn tomcat7:run</code> 编译的时候，出现提示：<br><code>No compiler is provided in this environment. Perhaps you are running on a JRE rather than a JDK?</code></p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>问题在于没有配置JDK环境变量。</p><ol><li>查看JDK目录，执行：<code>$ /usr/libexec/java_home -V</code><br>得到：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Matching Java Virtual Machines (2):</span><br><span class="line">    1.8.301.09 (x86_64) <span class="string">"Oracle Corporation"</span> - <span class="string">"Java"</span> /Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home</span><br><span class="line">    1.8.0_301 (x86_64) <span class="string">"Oracle Corporation"</span> - <span class="string">"Java SE 8"</span> /Library/Java/JavaVirtualMachines/jdk1.8.0_301.jdk/Contents/Home</span><br><span class="line">/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home</span><br></pre></td></tr></table></figure>可知，我们的JDK目录位于：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.8.0_301 (x86_64) &quot;Oracle Corporation&quot; - &quot;Java SE 8&quot; &#x2F;Library&#x2F;Java&#x2F;JavaVirtualMachines&#x2F;jdk1.8.0_301.jdk&#x2F;Contents&#x2F;Home</span><br></pre></td></tr></table></figure></li><li>配置JDK环境变量，执行：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ open -e .bash_profile</span><br></pre></td></tr></table></figure></li><li>在.bash_profile中添加：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME&#x3D;&#x2F;Library&#x2F;Java&#x2F;JavaVirtualMachines&#x2F;jdk1.8.0_301.jdk&#x2F;Contents&#x2F;Home</span><br></pre></td></tr></table></figure></li><li>执行：<code>$ source .bash_profile</code>使之生效.</li><li>执行：<code>echo $JAVA_HOME</code>查看是否生效。</li></ol><h3 id="问题回溯"><a href="#问题回溯" class="headerlink" title="问题回溯"></a>问题回溯</h3><p>其实问题的本质就是maven找不到JDK，配置一下JDK环境变量即可。</p><div class="note primary">            <p><strong>参考：</strong> <a href="https://juejin.cn/post/6844903878694010893" target="_blank" rel="noopener">Mac 配置JDK环境变量</a></p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;记一次mvn编译时踩的坑。&lt;/p&gt;
    
    </summary>
    
    
      <category term="指尖飞舞" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/"/>
    
      <category term="工程" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="异常" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E5%B7%A5%E7%A8%8B/%E5%BC%82%E5%B8%B8/"/>
    
    
      <category term="工程" scheme="https://csyslabs.github.io/tags/%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="Maven" scheme="https://csyslabs.github.io/tags/Maven/"/>
    
      <category term="异常" scheme="https://csyslabs.github.io/tags/%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>HJ32. 密码截取</title>
    <link href="https://csyslabs.github.io/2021/08/23/HJ32-%E5%AF%86%E7%A0%81%E6%88%AA%E5%8F%96/"/>
    <id>https://csyslabs.github.io/2021/08/23/HJ32-%E5%AF%86%E7%A0%81%E6%88%AA%E5%8F%96/</id>
    <published>2021-08-23T14:54:01.000Z</published>
    <updated>2023-06-25T16:28:37.567Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>最长回文子串问题。</p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>描述</strong><br>Catcher是MCA国的情报员，他工作时发现敌国会用一些对称的密码进行通信，比如像这些 $ABBA$，$ABA$，$A$，$123321$，但是他们有时会在开始或结束时加入一些无关的字符以防止别国破解。比如进行下列变化 $ABBA$-&gt;$12ABBA$, $ABA$-&gt;$ABAKK$, $123321$-&gt;$51233214$　。因为截获的串太长了，而且存在多种可能的情况（ $abaaab$ 可看作是 $aba$,或 $baaab$ 的加密形式），Cathcer的工作量实在是太大了，他只能向电脑高手求助，你能帮Catcher找出最长的有效密码串吗？</p><p>本题含有多组样例输入。</p><p><strong>输入描述：</strong><br>输入一个字符串</p><p><strong>输出描述：</strong><br>返回有效密码串的最大长度</p><p><strong>示例1</strong></p><blockquote><p>输入：<br>ABBA</p></blockquote><blockquote><p>输出：<br>4</p></blockquote><h3 id="最长回文子串"><a href="#最长回文子串" class="headerlink" title="最长回文子串"></a>最长回文子串</h3><p>枚举回文子串中心点，根据回文子串长度的奇偶性分别求出最长串。</p><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">C++</a></li><li class="tab"><a href="#g_tab0-2">C++</a></li><li class="tab"><a href="#g_tab0-3">Java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * author: etoa</span></span><br><span class="line"><span class="comment"> * code at: 2021-06-06</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">for</span> (; getline(<span class="built_in">cin</span>, s);)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">-1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// for each center</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// odd size</span></span><br><span class="line">            <span class="keyword">int</span> l = i - <span class="number">1</span>, r = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (; l &gt;= <span class="number">0</span> &amp;&amp; r &lt;= s.<span class="built_in">size</span>() &amp;&amp; s[l] == s[r]; l--, r++);</span><br><span class="line">            <span class="keyword">int</span> len = r - <span class="number">1</span> - (l + <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">            res = <span class="built_in">max</span>(res, len);</span><br><span class="line">            <span class="comment">// even size</span></span><br><span class="line">            l = i, r = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (; l &gt;= <span class="number">0</span> &amp;&amp; r &lt;= s.<span class="built_in">size</span>() &amp;&amp; s[l] == s[r]; l--, r++);</span><br><span class="line">            len = r - <span class="number">1</span> - (l + <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">            res = <span class="built_in">max</span>(res, len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="g_tab0-2"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * author: etoa</span></span><br><span class="line"><span class="comment"> * code at: 2021-08-23 22:58:01</span></span><br><span class="line"><span class="comment"> * 如果是求出最长回文子串是什么，可以参考如下代码</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">ranger</span><span class="params">(<span class="built_in">string</span> &amp;s, <span class="keyword">int</span> lc, <span class="keyword">int</span> rc)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s[lc] != s[rc]) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">int</span> l = lc - <span class="number">1</span>, r = rc + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; l &gt;= <span class="number">0</span> &amp;&amp; r &lt;= s.<span class="built_in">size</span>() - <span class="number">1</span> &amp;&amp; s[l] == s[r]; --l, ++r);</span><br><span class="line">    ++l, --r;</span><br><span class="line">    <span class="keyword">return</span> s.substr(l, r - l + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">ranger</span><span class="params">(<span class="built_in">string</span> &amp;s, <span class="keyword">int</span> center)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> res;</span><br><span class="line">    <span class="keyword">int</span> l = center - <span class="number">1</span>, r = center + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; l &gt;= <span class="number">0</span> &amp;&amp; r &lt;= s.<span class="built_in">size</span>() - <span class="number">1</span> &amp;&amp; s[l] == s[r]; --l, ++r);</span><br><span class="line">    ++l, --r;</span><br><span class="line">    <span class="keyword">return</span> s.substr(l, r - l + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>)-&gt;sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">for</span> (; <span class="built_in">cin</span> &gt;&gt; s;) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">-1</span>;</span><br><span class="line">        <span class="comment">// 最长回文子串长度为奇数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">string</span> t = ranger(s, i);</span><br><span class="line">            res = <span class="built_in">max</span>(res, (<span class="keyword">int</span>)t.<span class="built_in">size</span>());</span><br><span class="line">            <span class="comment">// cout &lt;&lt; t &lt;&lt; endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最长回文子串长度为偶数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">string</span> t = ranger(s, i, i + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (t != <span class="string">""</span>) res = <span class="built_in">max</span>(res, (<span class="keyword">int</span>)t.<span class="built_in">size</span>());</span><br><span class="line">            <span class="comment">// cout &lt;&lt; t &lt;&lt; endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="g_tab0-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * author: etoa</span></span><br><span class="line"><span class="comment"> * code at: 2021-08-23 23:07:47</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">for</span> (; in.hasNext();) &#123;</span><br><span class="line">            String s = in.next();</span><br><span class="line">            <span class="keyword">int</span> res = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, n = s.length(); i &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> l = i - <span class="number">1</span>, r = i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (; l &gt;= <span class="number">0</span> &amp;&amp; r &lt; n &amp;&amp; s.charAt(l) == s.charAt(r); --l, ++r);</span><br><span class="line">                ++l;</span><br><span class="line">                --r;</span><br><span class="line">                res = Math.max(res, r - l + <span class="number">1</span>);</span><br><span class="line">                l = i;</span><br><span class="line">                r = i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (; l &gt;= <span class="number">0</span> &amp;&amp; r &lt; n &amp;&amp; s.charAt(l) == s.charAt(r); --l, ++r);</span><br><span class="line">                ++l;</span><br><span class="line">                --r;</span><br><span class="line">                res = Math.max(res, r - l + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><div class="note primary">            <p><strong>原题链接：</strong> <a href="https://www.nowcoder.com/practice/3cd4621963e8454594f00199f4536bb1?tpId=37&&tqId=21255&rp=1&ru=/ta/huawei&qru=/ta/huawei/question-ranking" target="_blank" rel="noopener">HJ32. 密码截取</a></p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;最长回文子串问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="指尖飞舞" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/"/>
    
      <category term="算法" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/"/>
    
      <category term="NowCoder" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/NowCoder/"/>
    
      <category term="华为机试题库" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/NowCoder/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95%E9%A2%98%E5%BA%93/"/>
    
    
      <category term="算法" scheme="https://csyslabs.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="字符串" scheme="https://csyslabs.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="NowCoder" scheme="https://csyslabs.github.io/tags/NowCoder/"/>
    
      <category term="华为机试题库" scheme="https://csyslabs.github.io/tags/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95%E9%A2%98%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>HJ29. 字符串加解密</title>
    <link href="https://csyslabs.github.io/2021/08/23/HJ29-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8A%A0%E8%A7%A3%E5%AF%86/"/>
    <id>https://csyslabs.github.io/2021/08/23/HJ29-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8A%A0%E8%A7%A3%E5%AF%86/</id>
    <published>2021-08-23T05:08:51.000Z</published>
    <updated>2023-06-25T16:28:37.567Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要：</strong><br>简单字符串处理，需要对ASCII码表很熟。</p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><strong>描述</strong></p><ol><li><p>对输入的字符串进行加解密，并输出。</p></li><li><p>加密方法为：</p></li></ol><p>当内容是英文字母时则用该英文字母的后一个字母替换，同时字母变换大小写,如字母 $a$ 时则替换为 $B$；字母 $Z$ 时则替换为 $a$；</p><p>当内容是数字时则把该数字加 $1$，如 $0$ 替换 $1$，$1$ 替换 $2$，$9$ 替换 $0$；</p><p>其他字符不做变化。</p><ol start="3"><li>解密方法为加密的逆过程。</li></ol><p>本题含有多组样例输入。</p><p><strong>输入描述：</strong></p><p>输入说明<br>输入一串要加密的密码<br>输入一串加过密的密码</p><p><strong>输出描述：</strong></p><p>输出说明<br>输出加密后的字符<br>输出解密后的字符</p><p><strong>示例1</strong></p><blockquote><p>输入：<br>abcdefg<br>BCDEFGH</p></blockquote><blockquote><p>输出：<br>BCDEFGH<br>abcdefg</p></blockquote><h3 id="根据ASCII码表进行处理"><a href="#根据ASCII码表进行处理" class="headerlink" title="根据ASCII码表进行处理"></a>根据ASCII码表进行处理</h3><p>Java语言不方便直接写ASCII码。</p><div class="tabs" id="g_tab0"><ul class="nav-tabs"><li class="tab active"><a href="#g_tab0-1">C++</a></li><li class="tab"><a href="#g_tab0-2">Java</a></li></ul><div class="tab-content"><div class="tab-pane active" id="g_tab0-1"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * author: etoa</span></span><br><span class="line"><span class="comment"> * code at: 2021-08-23 13:13:18</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decode</span><span class="params">(<span class="built_in">string</span> &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> res = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, n = s.<span class="built_in">size</span>(); i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> c = s[i];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isdigit</span>(c)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="number">48</span>) &#123;</span><br><span class="line">                res += <span class="number">57</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res += c - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="number">65</span>) &#123;</span><br><span class="line">                res += <span class="number">97</span> + <span class="number">25</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="number">97</span>) &#123;</span><br><span class="line">                res += <span class="number">90</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res += <span class="built_in">islower</span>(c) ? c - <span class="number">32</span> - <span class="number">1</span> : c + <span class="number">32</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encode</span><span class="params">(<span class="built_in">string</span> &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> res = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, n = s.<span class="built_in">size</span>(); i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> c = s[i];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isdigit</span>(c)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="number">57</span>) &#123;</span><br><span class="line">                res += <span class="number">48</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res += c + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="number">90</span>) &#123;</span><br><span class="line">                res += <span class="number">97</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="number">97</span> + <span class="number">25</span>) &#123;</span><br><span class="line">                res += <span class="number">65</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res += <span class="built_in">islower</span>(c) ? c - <span class="number">32</span> + <span class="number">1</span>: c + <span class="number">32</span> + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>)-&gt;sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">string</span> stoencode;</span><br><span class="line">    <span class="built_in">string</span> stodecode;</span><br><span class="line">    <span class="keyword">for</span> (; <span class="built_in">cin</span> &gt;&gt; stoencode;) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; stodecode;</span><br><span class="line">        encode(stoencode);</span><br><span class="line">        decode(stodecode);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="g_tab0-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * author: etoa</span></span><br><span class="line"><span class="comment"> * code at: 2021-08-23 13:31:12</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">decode</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, n = s.length(); i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (Character.isDigit(c)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="string">'0'</span>) &#123;</span><br><span class="line">                    res.append(<span class="string">'9'</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    res.append((<span class="keyword">char</span>)(c - <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="string">'A'</span>) &#123;</span><br><span class="line">                    res.append(<span class="string">'z'</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'a'</span>) &#123;</span><br><span class="line">                    res.append(<span class="string">'Z'</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    res.append(Character.isLowerCase(c) ? (<span class="keyword">char</span>)(c - <span class="number">32</span> - <span class="number">1</span>) : (<span class="keyword">char</span>)(c + <span class="number">32</span> - <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, n = s.length(); i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (Character.isDigit(c)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="string">'9'</span>) &#123;</span><br><span class="line">                    res.append(<span class="string">'0'</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    res.append((<span class="keyword">char</span>)(c + <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="string">'Z'</span>) &#123; </span><br><span class="line">                    res.append(<span class="string">'a'</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'z'</span>) &#123;</span><br><span class="line">                    res.append(<span class="string">'A'</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    res.append(Character.isLowerCase(c) ? (<span class="keyword">char</span>)(c - <span class="number">32</span> + <span class="number">1</span>) : (<span class="keyword">char</span>)(c + <span class="number">32</span> + <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String stoEncode;</span><br><span class="line">        String stoDecode;</span><br><span class="line">        <span class="keyword">for</span> (; in.hasNext();) &#123;</span><br><span class="line">            stoEncode = in.next();</span><br><span class="line">            stoDecode = in.next();</span><br><span class="line">            encode(stoEncode);</span><br><span class="line">            decode(stoDecode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><h3 id="查表"><a href="#查表" class="headerlink" title="查表"></a>查表</h3><p>本题还可使用查表方法，事先构造加解密对应的表。在此不再赘述。</p><div class="note primary">            <p><strong>原题链接：</strong> <a href="https://www.nowcoder.com/practice/2aa32b378a024755a3f251e75cbf233a?tpId=37&&tqId=21252&rp=1&ru=/ta/huawei&qru=/ta/huawei/question-ranking" target="_blank" rel="noopener">HJ29. 字符串加解密</a></p>          </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;br&gt;简单字符串处理，需要对ASCII码表很熟。&lt;/p&gt;
    
    </summary>
    
    
      <category term="指尖飞舞" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/"/>
    
      <category term="算法" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/"/>
    
      <category term="NowCoder" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/NowCoder/"/>
    
      <category term="华为机试题库" scheme="https://csyslabs.github.io/categories/%E6%8C%87%E5%B0%96%E9%A3%9E%E8%88%9E/%E7%AE%97%E6%B3%95/NowCoder/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95%E9%A2%98%E5%BA%93/"/>
    
    
      <category term="算法" scheme="https://csyslabs.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="字符串" scheme="https://csyslabs.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="NowCoder" scheme="https://csyslabs.github.io/tags/NowCoder/"/>
    
      <category term="华为机试题库" scheme="https://csyslabs.github.io/tags/%E5%8D%8E%E4%B8%BA%E6%9C%BA%E8%AF%95%E9%A2%98%E5%BA%93/"/>
    
  </entry>
  
</feed>
